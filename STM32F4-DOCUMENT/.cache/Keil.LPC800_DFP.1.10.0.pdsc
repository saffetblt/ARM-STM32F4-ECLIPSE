<?xml version="1.0" encoding="UTF-8"?>

<package schemaVersion="1.4" xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="PACK.xsd">
  <vendor>Keil</vendor>
  <url>http://www.keil.com/pack/</url>
  <name>LPC800_DFP</name>
  <description>NXP LPC800 Series Device Support</description>

  <releases>
    <release version="1.10.0" date="2018-07-30" deprecated="2018-07-30" replacement="Keil.LPC8N04_DFP">
      The device support for these devices is now provided by NXP with the only exception of the LPC8N04 series:
      - Keil.LPC8N04_DFP.1.0.0.pack
    </release>
    <release version="1.9.0" date="2018-05-18">
      Note: Pack is not backward campatible, to pack 1.7.0, because of changed and renamed header files!
      Updated LPC8N04 device support files.
      Updated LPC80x device support files.
      Updated LPC83x device support files.
      Updated documentation.
    </release>
    <release version="1.8.0" date="2018-04-18">
      Updated LPC800 device support files.
      Updated documentation.
      Reworked examples.
      Updated LPC84x SVD file.
    </release>
    <release version="1.7.0" date="2018-01-11">
      Added LPC804 and LPC8N04 device support.
    </release>
    <release version="1.6.0" date="2017-11-15">
      Added LPC802 device support.
      Updated device documentation.
      Updated debug sequences: When disabling 'Reset Vector Catch', use read modify write operation on updating DEMCR_Addr to avoid side effects.
      Updated LPC84x-LPCXpresso RTX5_Blinky example:
      - Re-added RAM target.
    </release>
    <release version="1.5.0" date="2017-05-23">
      Added LPC84x device support.
      Updated LPC84x SVD file.
      Updated documentation.
      Updated LPC84x-LPCXpresso RTX5_Blinky example:
      - Removed RAM target.
    </release>
    <release version="1.4.0" date="2016-10-04">
      Updated LPC83x SVD file.
    </release>
    <release version="1.3.0" date="2016-09-05">
      Added LPC83x device support.
      Updated documentation.
      Corrected doxy comments is system file.
    </release>
    <release version="1.2.0" date="2015-06-26">
      Updated LPC8xx.h fixing wrong address offset for IRQ_FLAG in struct LPC_MRT_TypeDef.
    </release>
    <release version="1.1.0" date="2014-10-13">
      Added LPC82x device support.
      Added Board description, examples for LPC824-Xpresso and LPC812-Xpresso development boards.
    </release>
    <release version="1.0.1">
      Updated: Device description with features
    </release>
    <release version="1.0.0">
      First Release version of LPC800 Device Family Pack.
    </release>
  </releases>

  <keywords>
    <!-- keywords for indexing -->
    <keyword>NXP</keyword>
    <keyword>Device Support</keyword>
    <keyword>Device Family Package NXP</keyword>
    <keyword>LPC800</keyword>
    <keyword>LPC8xx</keyword>
  </keywords>

  <devices>
    <family Dfamily="LPC800 Series" Dvendor="NXP:11">
      <processor Dcore="Cortex-M0+" DcoreVersion="r0p0" Dfpu="0" Dmpu="0" Dendian="Little-endian"/>
      <debugconfig default="swd" clock="5000000" swj="0"/>
      <book name="Documents/dui0662a_cortex_m0p_r0p0_dgug.pdf" title="Cortex-M0+ Generic User Guide"/>

      <sequences>
        <!-- VectReset not available on CM0/CM0+ -->
        <sequence name="ResetProcessor" disable="true"/>
      </sequences>

      <!-- ************************  Subfamily 'LPC802'  **************************** -->
      <subFamily DsubFamily="LPC802">
        <processor Dclock="15000000"/>

        <book name="Documents/UM11045.pdf" title="LPC802 User manual"/>
        <book name="Documents/LPC802.pdf"  title="LPC802 Datasheet"/>
        <description>
The LPC802 are an ARM Cortex-M0+ based, low-cost 32-bit MCU family operating at CPU frequencies of up to 15 MHz.
The LPC802 support up to 16 KB of flash memory and 2 KB of SRAM.
The peripheral complement of the LPC802 includes one I2C-bus interface, up to two USARTs, one SPI interface, one multi-rate timer, self-wake-up timer, one general purpose 32-bit counter/timer, one 12-bit ADC, one analog comparator, function-configurable I/O ports through a switch matrix, and up to 17 general-purpose I/O pins.
        </description>

        <!--
             On LPC802 bootloader must run to initialize the flash trim register.
             Without initialized flash trim register flash program/erase wonâ€™t work.
             Follwing seequences shall ensure thet the bootloader has run.
          -->
        <sequences>
<!-- Reset Stuff -->
          <sequence name="ForceCoreHalt">
            <block>
              __var SCS_Addr   = 0xE000E000;
              __var AIRCR_Addr = SCS_Addr + 0xD0C;
              __var DHCSR_Addr = SCS_Addr + 0xDF0;
              __var DCRSR_Addr = SCS_Addr + 0xDF4;
              __var DCRDR_Addr = SCS_Addr + 0xDF8;
              __var DHCSR_Val  = 0;
            </block>

            <!-- wait until core has stopped or run in timeout -->
            <control while="((DHCSR_Val = Read32(DHCSR_Addr)) &amp; 0x00020000) == 0" timeout="100000"/>

            <!-- if core has not stopped force halt -->
            <control if="(DHCSR_Val &amp; 0x00020000) == 0">
              <block info="Halt core">
                Write32(DHCSR_Addr,0xA05F0003);                                  // halt core
              </block>

              <!-- wait until core has stopped -->
              <control while="(Read32(DHCSR_Addr) &amp; 0x00020000) == 0" timeout="1000"/>
            </control>
          </sequence>

          <sequence name="ResetSystem"    info="SYSRESETREQ">
            <block>
              __var SCS_Addr   = 0xE000E000;
              __var AIRCR_Addr = SCS_Addr + 0xD0C;
              __var DHCSR_Addr = SCS_Addr + 0xDF0;

              __errorcontrol = 1;                                              // ignore errors
              Write32(AIRCR_Addr, 0x05FA0004);                                 // Execute SYSRESETREQ via AIRCR
              __errorcontrol = 0;                                              // check errors

              DAP_Delay(1000);                                                 // time for reset
            </block>

            <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
            <control while="(Read32(DHCSR_Addr) &amp; 0x02000000) == 0" timeout="100000"/>

            <block>
              Sequence("ForceCoreHalt");                                       // halt the core
            </block>
          </sequence>

          <sequence name="ResetProcessor" info="VECTRESET">
            <block>
              __var SCS_Addr   = 0xE000E000;
              __var AIRCR_Addr = SCS_Addr + 0xD0C;
              __var DHCSR_Addr = SCS_Addr + 0xDF0;

              __errorcontrol = 1;                                              // ignore errors
              Write32(AIRCR_Addr, 0x05FA0001);                                 // Execute VECTRESET via AIRCR
              __errorcontrol = 0;                                              // check errors
            </block>

            <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
            <control while="(Read32(DHCSR_Addr) &amp; 0x02000000) == 0" timeout="100000"/>

            <block>
              Sequence("ForceCoreHalt");                                       // halt the core
            </block>
          </sequence>

          <sequence name="ResetHardware"  info="HW RESET">
            <block>
              __var nReset      = 0x80;
              __var canReadPins = 0;

              canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);     // Deassert nRESET line
            </block>

            <!-- Keep reset active for 50 ms -->
            <control while="1" timeout="50000"/>

            <control if="canReadPins">
              <!-- Assert nRESET line and wait max. 1s for recovery -->
              <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000"/>
            </control>

            <control if="!canReadPins">
              <block>
                DAP_SWJ_Pins(nReset, nReset, 0);                               // Assert nRESET line
              </block>

              <!-- Wait 100ms for recovery if nRESET not readable -->
              <control while="1" timeout="100000"/>
            </control>

            <block>
              Sequence("ForceCoreHalt");                                       // halt the core
            </block>
          </sequence>
<!-- Reset Stuff -->

<!-- Stop After Bootloader -->
          <sequence name="ResetCatchSet">
            <block>
              __var SCS_Addr   = 0xE000E000;
              __var DHCSR_Addr = SCS_Addr + 0xDF0;
              __var DEMCR_Addr = SCS_Addr + 0xDFC;
              __var value      = 0;
              __var FPB_BKPT_H = 0x80000000;
              __var FPB_BKPT_L = 0x40000000;
              __var FPB_COMP_M = 0x1FFFFFFC;
              __var FPB_KEY    = 0x00000002;
              __var FPB_ENABLE = 0x00000001;
            </block>

            <!-- read reset vector from Flash -->
            <block>
              value = Read32(DEMCR_Addr);
              Write32(DEMCR_Addr, (value &amp; (~0x00000001)));                // Disable Reset Vector Catch in DEMCR
            </block>

            <!-- set BreakPoint regardless whether reset vector is valid or not -->
            <block>
              Write32(0x40048000, 0x00000002);                                 // Map Flash to Vectors
              value = Read32 (0x00000004);                                     // Read Reset Vector

              value = ((value &amp; 0x02) ? FPB_BKPT_H : FPB_BKPT_L) | (value &amp; FPB_COMP_M) | FPB_ENABLE ;
              Write32(0xE0002008, value);                                      // Set BP0 to Reset Vector
              Write32(0xE0002000, (FPB_KEY | FPB_ENABLE));                     // Enable FPB
            </block>

            <block>
              Read32(DHCSR_Addr);                                              // Read DHCSR to clear potentially set DHCSR.S_RESET_ST bit
            </block>
          </sequence>

          <sequence name="ResetCatchClear">
            <block>
              __var SCS_Addr   = 0xE000E000;
              __var DEMCR_Addr = SCS_Addr + 0xDFC;
              __var value      = 0;

              value = Read32(DEMCR_Addr);
              Write32(DEMCR_Addr, (value &amp; (~0x00000001)));                // Disable Reset Vector Catch in DEMCR

              Write32(0xE0002008, 0x00000000);                                 // Clear BP0
              Write32(0xE0002000, 0x00000002);                                 // Disable FPB
            </block>
          </sequence>
<!-- Stop After Bootloader -->
        </sequences>

        <feature type="USART"         n="2"/>
        <feature type="I2C"           n="1"/>
        <feature type="SPI"           n="1"/>
        <feature type="ADC"           n="1"       m="12"  name="ADC"/>
        <feature type="WDT"           n="1"               name="Windowed Watchdog timer"/>
        <feature type="Timer"         n="4"               name="One 32-bit general purpose, two channel Multi-Rate, Self-Wake-up"/>
        <feature type="AnalogOther"   n="1"               name="Comparator"/>
        <feature type="CoreOther"     n="1"               name="CRC engine"/>
        <feature type="CoreOther"     n="1"               name="Unique device serial number"/>

        <!-- *************************  Device 'LPC802M001JDH16'  ***************************** -->
        <device Dname="LPC802M001JDH16">
          <compile header="Device/Include/LPC802.h"  define="LPC802M001JDH16"/>
          <debug svd="SVD/LPC802.svd"/>
          <memory id="IROM1"                     start="0x00000000" size="0x00004000" startup="1" default="1"/>
          <memory id="IRAM1"                     start="0x10000000" size="0x00000800" init   ="0" default="1"/>
          <algorithm name="Flash/LPC80x_16.FLM"  start="0x00000000" size="0x00004000" RAMstart="0x10000000" RAMsize="0x07E0" default="1"/>

          <feature type="IOs"   n="13"/>
          <feature type="SOP"   n="16" name="TSSOP Package"/>
        </device>

        <!-- *************************  Device 'LPC802M001JDH20'  ***************************** -->
        <device Dname="LPC802M001JDH20">
          <compile header="Device/Include/LPC802.h"  define="LPC802M001JDH20"/>
          <debug svd="SVD/LPC802.svd"/>
          <memory id="IROM1"                     start="0x00000000" size="0x00004000" startup="1" default="1"/>
          <memory id="IRAM1"                     start="0x10000000" size="0x00000800" init   ="0" default="1"/>
          <algorithm name="Flash/LPC80x_16.FLM"  start="0x00000000" size="0x00004000" RAMstart="0x10000000" RAMsize="0x07E0" default="1"/>

          <feature type="IOs"   n="17"/>
          <feature type="SOP"   n="20" name="TSSOP Package"/>
        </device>

        <!-- *************************  Device 'LPC802M011JDH20'  ***************************** -->
        <device Dname="LPC802M011JDH20">
          <compile header="Device/Include/LPC802.h"  define="LPC802M011JDH20"/>
          <debug svd="SVD/LPC802.svd"/>
          <memory id="IROM1"                     start="0x00000000" size="0x00004000" startup="1" default="1"/>
          <memory id="IRAM1"                     start="0x10000000" size="0x00000800" init   ="0" default="1"/>
          <algorithm name="Flash/LPC80x_16.FLM"  start="0x00000000" size="0x00004000" RAMstart="0x10000000" RAMsize="0x07E0" default="1"/>

          <feature type="IOs"   n="16"/>
          <feature type="SOP"   n="20" name="TSSOP Package"/>
        </device>

        <!-- *************************  Device 'LPC802M001JHI33'  ***************************** -->
        <device Dname="LPC802M001JHI33">
          <compile header="Device/Include/LPC802.h"  define="LPC802M001JHI33"/>
          <debug svd="SVD/LPC802.svd"/>
          <memory id="IROM1"                     start="0x00000000" size="0x00004000" startup="1" default="1"/>
          <memory id="IRAM1"                     start="0x10000000" size="0x00000800" init   ="0" default="1"/>
          <algorithm name="Flash/LPC80x_16.FLM"  start="0x00000000" size="0x00004000" RAMstart="0x10000000" RAMsize="0x07E0" default="1"/>

          <feature type="IOs"   n="25"/>
          <feature type="QFN"   n="33" name="HVQFN Package"/>
        </device>
      </subFamily>

      <!-- ************************  Subfamily 'LPC804'  **************************** -->
      <subFamily DsubFamily="LPC804">
        <processor Dclock="15000000"/>

        <book name="Documents/UM11065.pdf" title="LPC804 User manual"/>
        <book name="Documents/LPC804.pdf"  title="LPC804 Datasheet"/>
        <description>
The LPC80x are an ARM Cortex-M0+ based, low-cost 32-bit MCU family operating at CPU frequencies of up to 15 MHz.
The LPC804 support up to 32 KB of flash memory and 4 KB of SRAM.
The peripheral complement of the LPC80x includes a CRC engine, two I2C-bus interfaces, two USARTs, one SPI interface, Capacitive Touch Interface (Cap Touch), one multi-rate timer, self-wake-up timer, one general purpose 32-bit counter/timer, one 12-bit ADC, one10-bit DAC, one analog comparator, function-configurable I/O ports through a switch matrix, an input pattern match engine, Programmable Logic Unit (PLU), and up to 30 general-purpose I/O pins.
        </description>

        <!--
             On LPC804 bootloader must run to initialize the flash trim register.
             Without initialized flash trim register flash program/erase wonâ€™t work.
             Follwing seequences shall ensure thet the bootloader has run.
          -->
        <sequences>
<!-- Reset Stuff -->
          <sequence name="ForceCoreHalt">
            <block>
              __var SCS_Addr   = 0xE000E000;
              __var AIRCR_Addr = SCS_Addr + 0xD0C;
              __var DHCSR_Addr = SCS_Addr + 0xDF0;
              __var DCRSR_Addr = SCS_Addr + 0xDF4;
              __var DCRDR_Addr = SCS_Addr + 0xDF8;
              __var DHCSR_Val  = 0;
            </block>

            <!-- wait until core has stopped or run in timeout -->
            <control while="((DHCSR_Val = Read32(DHCSR_Addr)) &amp; 0x00020000) == 0" timeout="100000"/>

            <!-- if core has not stopped force halt -->
            <control if="(DHCSR_Val &amp; 0x00020000) == 0">
              <block info="Halt core">
                Write32(DHCSR_Addr,0xA05F0003);                                  // halt core
              </block>

              <!-- wait until core has stopped -->
              <control while="(Read32(DHCSR_Addr) &amp; 0x00020000) == 0" timeout="1000"/>
            </control>
          </sequence>

          <sequence name="ResetSystem"    info="SYSRESETREQ">
            <block>
              __var SCS_Addr   = 0xE000E000;
              __var AIRCR_Addr = SCS_Addr + 0xD0C;
              __var DHCSR_Addr = SCS_Addr + 0xDF0;

              __errorcontrol = 1;                                              // ignore errors
              Write32(AIRCR_Addr, 0x05FA0004);                                 // Execute SYSRESETREQ via AIRCR
              __errorcontrol = 0;                                              // check errors

              DAP_Delay(1000);                                                 // time for reset
            </block>

            <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
            <control while="(Read32(DHCSR_Addr) &amp; 0x02000000) == 0" timeout="100000"/>

            <block>
              Sequence("ForceCoreHalt");                                       // halt the core
            </block>
          </sequence>

          <sequence name="ResetProcessor" info="VECTRESET">
            <block>
              __var SCS_Addr   = 0xE000E000;
              __var AIRCR_Addr = SCS_Addr + 0xD0C;
              __var DHCSR_Addr = SCS_Addr + 0xDF0;

              __errorcontrol = 1;                                              // ignore errors
              Write32(AIRCR_Addr, 0x05FA0001);                                 // Execute VECTRESET via AIRCR
              __errorcontrol = 0;                                              // check errors
            </block>

            <!-- Reset Recovery: Wait for DHCSR.S_RESET_ST bit to clear on read -->
            <control while="(Read32(DHCSR_Addr) &amp; 0x02000000) == 0" timeout="100000"/>

            <block>
              Sequence("ForceCoreHalt");                                       // halt the core
            </block>
          </sequence>

          <sequence name="ResetHardware"  info="HW RESET">
            <block>
              __var nReset      = 0x80;
              __var canReadPins = 0;

              canReadPins = (DAP_SWJ_Pins(0x00, nReset, 0) != 0xFFFFFFFF);     // Deassert nRESET line
            </block>

            <!-- Keep reset active for 50 ms -->
            <control while="1" timeout="50000"/>

            <control if="canReadPins">
              <!-- Assert nRESET line and wait max. 1s for recovery -->
              <control while="(DAP_SWJ_Pins(nReset, nReset, 0) &amp; nReset) == 0" timeout="1000000"/>
            </control>

            <control if="!canReadPins">
              <block>
                DAP_SWJ_Pins(nReset, nReset, 0);                               // Assert nRESET line
              </block>

              <!-- Wait 100ms for recovery if nRESET not readable -->
              <control while="1" timeout="100000"/>
            </control>

            <block>
              Sequence("ForceCoreHalt");                                       // halt the core
            </block>
          </sequence>
<!-- Reset Stuff -->

<!-- Stop After Bootloader -->
          <sequence name="ResetCatchSet">
            <block>
              __var SCS_Addr   = 0xE000E000;
              __var DHCSR_Addr = SCS_Addr + 0xDF0;
              __var DEMCR_Addr = SCS_Addr + 0xDFC;
              __var value      = 0;
              __var FPB_BKPT_H = 0x80000000;
              __var FPB_BKPT_L = 0x40000000;
              __var FPB_COMP_M = 0x1FFFFFFC;
              __var FPB_KEY    = 0x00000002;
              __var FPB_ENABLE = 0x00000001;
            </block>

            <!-- read reset vector from Flash -->
            <block>
              value = Read32(DEMCR_Addr);
              Write32(DEMCR_Addr, (value &amp; (~0x00000001)));                // Disable Reset Vector Catch in DEMCR
            </block>

            <!-- set BreakPoint regardless whether reset vector is valid or not -->
            <block>
              Write32(0x40048000, 0x00000002);                                 // Map Flash to Vectors
              value = Read32 (0x00000004);                                     // Read Reset Vector

              value = ((value &amp; 0x02) ? FPB_BKPT_H : FPB_BKPT_L) | (value &amp; FPB_COMP_M) | FPB_ENABLE ;
              Write32(0xE0002008, value);                                      // Set BP0 to Reset Vector
              Write32(0xE0002000, (FPB_KEY | FPB_ENABLE));                     // Enable FPB
            </block>

            <block>
              Read32(DHCSR_Addr);                                              // Read DHCSR to clear potentially set DHCSR.S_RESET_ST bit
            </block>
          </sequence>

          <sequence name="ResetCatchClear">
            <block>
              __var SCS_Addr   = 0xE000E000;
              __var DEMCR_Addr = SCS_Addr + 0xDFC;
              __var value      = 0;

              value = Read32(DEMCR_Addr);
              Write32(DEMCR_Addr, (value &amp; (~0x00000001)));                // Disable Reset Vector Catch in DEMCR

              Write32(0xE0002008, 0x00000000);                                 // Clear BP0
              Write32(0xE0002000, 0x00000002);                                 // Disable FPB
            </block>
          </sequence>
<!-- Stop After Bootloader -->
        </sequences>

        <feature type="USART"         n="2"/>
        <feature type="I2C"           n="2"/>
        <feature type="SPI"           n="1"/>
        <feature type="ADC"           n="1"       m="12"  name="ADC"/>
        <feature type="DAC"           n="1"       m="10"  name="DAC"/>
        <feature type="WDT"           n="1"               name="Windowed Watchdog timer"/>
        <feature type="Timer"         n="4"               name="One 32-bit general purpose, two channel Multi-Rate, Self-Wake-up"/>
        <feature type="AnalogOther"   n="1"               name="Comparator"/>
        <feature type="CoreOther"     n="1"               name="Capacitive Touch Interface"/>
        <feature type="CoreOther"     n="1"               name="CRC engine"/>
        <feature type="CoreOther"     n="1"               name="Unique device serial number"/>

        <!-- *************************  Device 'LPC804M101JDH20'  ***************************** -->
        <device Dname="LPC804M101JDH20">
          <compile header="Device/Include/LPC804.h"  define="LPC804M101JDH20"/>
          <debug svd="SVD/LPC804.svd"/>
          <memory id="IROM1"                     start="0x00000000" size="0x00008000" startup="1" default="1"/>
          <memory id="IRAM1"                     start="0x10000000" size="0x00001000" init   ="0" default="1"/>
          <algorithm name="Flash/LPC80x_32.FLM"  start="0x00000000" size="0x00008000" RAMstart="0x10000000" RAMsize="0x07E0" default="1"/>

          <feature type="IOs"   n="17"/>
          <feature type="SOP"   n="20" name="TSSOP Package"/>
        </device>

        <!-- *************************  Device 'LPC804M101JDH24'  ***************************** -->
        <device Dname="LPC804M101JDH24">
          <compile header="Device/Include/LPC804.h"  define="LPC804M101JDH24"/>
          <debug svd="SVD/LPC804.svd"/>
          <memory id="IROM1"                     start="0x00000000" size="0x00008000" startup="1" default="1"/>
          <memory id="IRAM1"                     start="0x10000000" size="0x00001000" init   ="0" default="1"/>
          <algorithm name="Flash/LPC80x_32.FLM"  start="0x00000000" size="0x00008000" RAMstart="0x10000000" RAMsize="0x07E0" default="1"/>

          <feature type="IOs"   n="21"/>
          <feature type="SOP"   n="24" name="TSSOP Package"/>
        </device>

        <!-- *************************  Device 'LPC804M111JDH24'  ***************************** -->
        <device Dname="LPC804M111JDH24">
          <compile header="Device/Include/LPC804.h"  define="LPC804M111JDH24"/>
          <debug svd="SVD/LPC804.svd"/>
          <memory id="IROM1"                     start="0x00000000" size="0x00008000" startup="1" default="1"/>
          <memory id="IRAM1"                     start="0x10000000" size="0x00001000" init   ="0" default="1"/>
          <algorithm name="Flash/LPC80x_32.FLM"  start="0x00000000" size="0x00008000" RAMstart="0x10000000" RAMsize="0x07E0" default="1"/>

          <feature type="IOs"   n="20"/>
          <feature type="SOP"   n="24" name="TSSOP Package"/>
        </device>

        <!-- *************************  Device 'LPC804M101JHI33'  ***************************** -->
        <device Dname="LPC804M101JHI33">
          <compile header="Device/Include/LPC804.h"  define="LPC804M101JHI33"/>
          <debug svd="SVD/LPC804.svd"/>
          <memory id="IROM1"                     start="0x00000000" size="0x00008000" startup="1" default="1"/>
          <memory id="IRAM1"                     start="0x10000000" size="0x00001000" init   ="0" default="1"/>
          <algorithm name="Flash/LPC80x_32.FLM"  start="0x00000000" size="0x00008000" RAMstart="0x10000000" RAMsize="0x07E0" default="1"/>

          <feature type="IOs"   n="30"/>
          <feature type="QFN"   n="33" name="HVQFN Package"/>
        </device>
      </subFamily>

      <!-- ************************  Subfamily 'LPC8N04'  *************************** -->
      <subFamily DsubFamily="LPC8N04">
        <processor Dclock="8000000"/>

        <book name="Documents/UM11074.pdf" title="LPC8N04 User manual"/>
        <book name="Documents/LPC8N04.pdf" title="LPC8N04 Datasheet"/>
        <description>
The NXP LPC8N04 is an IC optimized for an entry level Cortex-M0+ MCU with built-in NFC interface.
LPC8N04 supports an effective system solution with a minimal number of external components for NFC related applications.
        </description>

        <feature type="TempSens"      n="1"/>
        <feature type="I2C"           n="1"/>
        <feature type="SPI"           n="1"/>
        <feature type="RTC"           n="32768"                       name="Internal RTC"/>
        <feature type="WDT"           n="1"                           name="Windowed Watchdog timer"/>
        <feature type="Timer"         n="2"                           name="32-Bit / 16-Bit Timer"/>
        <feature type="CoreOther"     n="1"                           name="NFC/RFID ISO 14443 type A interface"/>
        <feature type="CoreOther"     n="1"                           name="CRC engine"/>
        <feature type="CoreOther"     n="1"                           name="Unique device serial number"/>

        <!-- *************************  Device 'LPC8N04FHI24'  ***************************** -->
        <device Dname="LPC8N04FHI24">
          <compile header="Device/Include/LPC8N04.h" define="LPC8N04FHI24"/>
          <debug svd="SVD/LPC8N04.svd"/>
          <memory id="IROM1"                     start="0x00000000" size="0x00007800" startup="1" default="1"/>
          <memory id="IRAM1"                     start="0x10000000" size="0x00002000" init   ="0" default="1"/>
          <algorithm name="Flash/LPC8N04_30.FLM" start="0x00000000" size="0x00007800"             default="1"/>

          <feature type="IOs"           n="12"/>
          <feature type="QFN"           n="24"                        name="QFN Package"/>
        </device>
      </subFamily>

      <!-- ************************  Subfamily 'LPC81x'  **************************** -->
      <subFamily DsubFamily="LPC81x">
        <processor Dclock="30000000"/>

        <book name="Documents/UM10601.pdf" title="LPC81x User manual"/>
        <book name="Documents/LPC81XM.pdf" title="LPC81x Datasheet"/>
        <description>
The LPC81x are an ARM Cortex-M0+ based, low-cost 32-bit MCU family operating at CPU frequencies of up to 30 MHz.
The LPC81x support up to 16 kB of flash memory and 4 kB of SRAM.
The peripheral complement of the LPC81x includes a CRC engine, one I2C-bus interface, up to three USARTs, up to two SPI interfaces, one multi-rate timer, self wake-up timer, and state-configurable timer, one comparator, function-configurable I/O ports through a switch matrix, an input pattern match engine, and up to 18 general-purpose I/O pins.
        </description>

        <feature type="I2C"           n="1"/>
        <feature type="WDT"           n="1"                           name="Windowed Watchdog timer"/>
        <feature type="Timer"         n="4"                           name="32-Bit Timer with Input Capture, Output Compare and PWM"/>
        <feature type="AnalogOther"   n="1"                           name="Comparator"/>
        <feature type="CoreOther"     n="1"                           name="CRC engine"/>
        <feature type="CoreOther"     n="1"                           name="Unique device serial number"/>

        <!-- *************************  Device 'LPC810M021FN8'  ***************************** -->
        <device Dname="LPC810M021FN8">
          <compile header="Device/Include/LPC810.h"  define="LPC810M021FN8"/>
          <debug svd="SVD/LPC810.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00001000" startup="1" default="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00000400" init   ="0" default="1"/>
          <algorithm name="Flash/LPC8xx_4.FLM"  start="0x00000000" size="0x00001000" RAMstart="0x10000000" RAMsize="0x03E0" default="1"/>

          <feature type="USART"         n="2"/>
          <feature type="SPI"           n="1"/>
          <feature type="IOs"           n="6"/>
          <feature type="DIP"           n="9"         name="Dual In-Line Package"/>
        </device>

        <!-- *************************  Device 'LPC811M001JDH16'  ***************************** -->
        <device Dname="LPC811M001JDH16">
          <compile header="Device/Include/LPC811.h"  define="LPC811M001JDH16"/>
          <debug svd="SVD/LPC811.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00002000" startup="1" default="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00000800" init   ="0" default="1"/>
          <algorithm name="Flash/LPC8xx_8.FLM"  start="0x00000000" size="0x00002000" RAMstart="0x10000000" RAMsize="0x07E0" default="1"/>

          <feature type="USART"         n="2"/>
          <feature type="SPI"           n="1"/>
          <feature type="IOs"           n="14"/>
          <feature type="SOP"           n="16"        name="SSOP Package"/>
        </device>

        <!-- *************************  Device 'LPC812M101JDH16'  ***************************** -->
        <device Dname="LPC812M101JDH16">
          <compile header="Device/Include/LPC812.h"  define="LPC812M101JDH16"/>
          <debug svd="SVD/LPC812.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00004000" startup="1" default="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00001000" init   ="0" default="1"/>
          <algorithm name="Flash/LPC8xx_16.FLM" start="0x00000000" size="0x00004000" RAMstart="0x10000000" RAMsize="0x0FE0" default="1"/>

          <feature type="USART"         n="3"/>
          <feature type="SPI"           n="2"/>
          <feature type="IOs"           n="14"/>
          <feature type="SOP"           n="16"        name="SSOP Package"/>
        </device>

        <!-- *************************  Device 'LPC812M101JD20'  ***************************** -->
        <device Dname="LPC812M101JD20">
          <compile header="Device/Include/LPC812.h"  define="LPC812M101JD20"/>
          <debug svd="SVD/LPC812.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00004000" startup="1" default="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00001000" init   ="0" default="1"/>
          <algorithm name="Flash/LPC8xx_16.FLM" start="0x00000000" size="0x00004000" RAMstart="0x10000000" RAMsize="0x0FE0" default="1"/>

          <feature type="USART"         n="2"/>
          <feature type="SPI"           n="1"/>
          <feature type="IOs"           n="18"/>
          <feature type="PackageOther"  n="20"        name="SO Package"/>
        </device>

        <!-- *************************  Device 'LPC812M101JDH20'  ***************************** -->
        <device Dname="LPC812M101JDH20">
          <compile header="Device/Include/LPC812.h"  define="LPC812M101JDH20"/>
          <debug svd="SVD/LPC812.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00004000" startup="1" default="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00001000" init   ="0" default="1"/>
          <algorithm name="Flash/LPC8xx_16.FLM" start="0x00000000" size="0x00004000" RAMstart="0x10000000" RAMsize="0x0FE0" default="1"/>

          <feature type="USART"         n="3"/>
          <feature type="SPI"           n="2"/>
          <feature type="IOs"           n="18"/>
          <feature type="SOP"           n="20"        name="SSOP Package"/>
        </device>

        <!-- *************************  Device 'LPC812M101JTB16'  ***************************** -->
        <device Dname="LPC812M101JTB16">
          <compile header="Device/Include/LPC812.h"  define="LPC812M101JTB16"/>
          <debug svd="SVD/LPC812.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00004000" startup="1" default="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00001000" init   ="0" default="1"/>
          <algorithm name="Flash/LPC8xx_16.FLM" start="0x00000000" size="0x00004000" RAMstart="0x10000000" RAMsize="0x0FE0" default="1"/>

          <feature type="USART"         n="3"/>
          <feature type="SPI"           n="2"/>
          <feature type="IOs"           n="14"/>
          <feature type="PackageOther"  n="16"        name="SON Package"/>
        </device>
      </subFamily>

      <!-- ************************  Subfamily 'LPC82x'  **************************** -->
      <subFamily DsubFamily="LPC82x">
        <processor Dclock="30000000"/>

        <book name="Documents/UM10800.pdf" title="LPC82x User manual"/>
        <book name="Documents/LPC82X.pdf"  title="LPC82x Datasheet"/>
        <description>
The LPC82x are an ARM Cortex-M0+ based, low-cost 32-bit MCU family operating at CPU frequencies of up to 30 MHz.
The LPC82x support up to 32 KB of flash memory and 8 KB of SRAM.
The peripheral complement of the LPC82x includes a CRC engine, four I2C-bus interfaces, up to three USARTs, up to two SPI interfaces, one multi-rate timer, self-wake-up timer, and state-configurable timer with PWM function (SCTimer/PWM), a DMA, one 12-bit ADC and one analog comparator, function-configurable I/O ports through a switch matrix, an input pattern match engine, and up to 29 general-purpose I/O pins.
        </description>

        <feature type="I2C"           n="4"/>
        <feature type="USART"         n="3"/>
        <feature type="SPI"           n="2"/>
        <feature type="WDT"           n="1"                           name="Windowed Watchdog timer"/>
        <feature type="Timer"         n="4"                           name="32-Bit Timer with Input Capture, Output Compare and PWM"/>
        <feature type="ADC"           n="1"       m="12"              name="ADC"/>
        <feature type="AnalogOther"   n="1"                           name="Comparator"/>
        <feature type="CoreOther"     n="1"                           name="CRC engine"/>
        <feature type="CoreOther"     n="1"                           name="Unique device serial number"/>

        <!-- *************************  Device 'LPC824M201JHI33'  ***************************** -->
        <device Dname="LPC824M201JHI33">
          <compile header="Device/Include/LPC824.h"  define="LPC824M201JHI33"/>
          <debug svd="SVD/LPC824.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00008000" startup="1" default="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00002000" init   ="0" default="1"/>
          <algorithm name="Flash/LPC8xx_32.FLM" start="0x00000000" size="0x00008000" RAMstart="0x10000000" RAMsize="0x0FE0" default="1"/>

          <feature type="IOs"           n="29"/>
          <feature type="QFN"           n="33"        name="QFN Package"/>
        </device>

        <!-- *************************  Device 'LPC824M201JDH20'  ***************************** -->
        <device Dname="LPC824M201JDH20">
          <compile header="Device/Include/LPC824.h"  define="LPC824M201JDH20"/>
          <debug svd="SVD/LPC824.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00008000" startup="1" default="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00002000" init   ="0" default="1"/>
          <algorithm name="Flash/LPC8xx_32.FLM" start="0x00000000" size="0x00008000" RAMstart="0x10000000" RAMsize="0x0FE0" default="1"/>

          <feature type="IOs"           n="18"/>
          <feature type="SOP"           n="20"        name="SSOP Package"/>
        </device>

        <!-- *************************  Device 'LPC822M101JHI33'  ***************************** -->
        <device Dname="LPC822M101JHI33">
          <compile header="Device/Include/LPC822.h"  define="LPC822M101JHI33"/>
          <debug svd="SVD/LPC822.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00004000" startup="1" default="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00001000" init   ="0" default="1"/>
          <algorithm name="Flash/LPC8xx_16.FLM" start="0x00000000" size="0x00004000" RAMstart="0x10000000" RAMsize="0x0FE0" default="1"/>

          <feature type="IOs"           n="29"/>
          <feature type="QFN"           n="33"        name="QFN Package"/>
        </device>

        <!-- *************************  Device 'LPC822M101JDH20'  ***************************** -->
        <device Dname="LPC822M101JDH20">
          <compile header="Device/Include/LPC822.h"  define="LPC822M101JDH20"/>
          <debug svd="SVD/LPC822.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00004000" startup="1" default="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00001000" init   ="0" default="1"/>
          <algorithm name="Flash/LPC8xx_16.FLM" start="0x00000000" size="0x00004000" RAMstart="0x10000000" RAMsize="0x0FE0" default="1"/>

          <feature type="IOs"           n="18"/>
          <feature type="SOP"           n="20"        name="SSOP Package"/>
        </device>
      </subFamily>

      <!-- ************************  Subfamily 'LPC83x'  **************************** -->
      <subFamily DsubFamily="LPC83x">
        <processor Dclock="30000000"/>

        <book name="Documents/UM11021.pdf" title="LPC83x User manual"/>
        <book name="Documents/LPC83X.pdf"  title="LPC83x Datasheet"/>
        <description>
The LPC83x are an ARM Cortex-M0+ based, low-cost 32-bit MCU family operating at CPU frequencies of up to 30 MHz.
The LPC83x support up to 32 KB of flash memory and 8 KB of SRAM.
The peripheral complement of the LPC83x includes a CRC engine, one I2C-bus interface, one USART, up to two SPI interfaces, one multi-rate timer, self-wake-up timer, and SCTimer/PWM, a DMA, one 12-bit ADC, function-configurable I/O ports through a switch matrix, an input pattern match engine, and up to 29 general-purpose I/O pins.
        </description>

        <feature type="I2C"           n="1"/>
        <feature type="USART"         n="1"/>
        <feature type="SPI"           n="2"/>
        <feature type="WDT"           n="1"                           name="Windowed Watchdog timer"/>
        <feature type="Timer"         n="4"                           name="32-Bit Timer with Input Capture, Output Compare and PWM"/>
        <feature type="ADC"           n="1"       m="12"              name="ADC"/>
        <feature type="CoreOther"     n="1"                           name="CRC engine"/>
        <feature type="CoreOther"     n="1"                           name="Unique device serial number"/>

        <!-- *************************  Device 'LPC834M101FHI33'  ***************************** -->
        <device Dname="LPC834M101FHI33">
          <compile header="Device/Include/LPC83x.h" define="LPC834M101FHI33"/>
          <debug svd="SVD/LPC83x.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00008000" startup="1" default="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00001000" init   ="0" default="1"/>
          <algorithm name="Flash/LPC8xx_32.FLM" start="0x00000000" size="0x00008000" RAMstart="0x10000000" RAMsize="0x0FE0" default="1"/>

          <feature type="IOs"           n="29"/>
          <feature type="QFN"           n="33"        name="QFN Package"/>
        </device>

        <!-- *************************  Device 'LPC832M101FDH20'  ***************************** -->
        <device Dname="LPC832M101FDH20">
          <compile header="Device/Include/LPC83x.h" define="LPC832M101FDH20"/>
          <debug svd="SVD/LPC83x.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00004000" startup="1" default="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00001000" init   ="0" default="1"/>
          <algorithm name="Flash/LPC8xx_16.FLM" start="0x00000000" size="0x00004000" RAMstart="0x10000000" RAMsize="0x0FE0" default="1"/>

          <feature type="IOs"           n="16"/>
          <feature type="SOP"           n="20"        name="SSOP Package"/>
        </device>
      </subFamily>

      <!-- ************************  Subfamily 'LPC84x'  **************************** -->
      <subFamily DsubFamily="LPC84x">
        <processor Dclock="30000000"/>

        <book name="Documents/UM11029.pdf" title="LPC84x User manual"/>
        <book name="Documents/LPC84x.pdf"  title="LPC84x Datasheet"/>
        <description>
The LPC84x are an ARM Cortex-M0+ based, low-cost 32-bit MCU family operating at CPU frequencies of up to 30 MHz.
The LPC84x support up to 64 KB of flash memory and 16 KB of SRAM.
The peripheral complement of the LPC84x includes a CRC engine, four I2C-bus interfaces, up to five USARTs, up to two SPI interfaces, Capacitive Touch Interface (CAPT), one multi-rate timer, self-wake-up timer, SCTimer/PWM, one general purpose 32-bit counter/timer, a DMA, one 12-bit ADC, two 10-bit DACs, one analog comparator, function-configurable I/O ports through a switch matrix, an input pattern match engine, and up to 54 general-purpose I/O pins.
        </description>

        <debugvars configfile="Debug/LPC84x.dbgconf">
          // Debug Access Variables, can be modified by user via copies of DBGCONF files as created by uVision. Also see sub-family level.
          __var Dbg_CR                = 0x00000000;                            // DBG_CR
        </debugvars>

        <sequences>
          <sequence name="DebugDeviceUnlock">
            <block>
              __var value = 0;

              value  = Read32(0x40048080);                                     // Read SYSAHBCLKCTRL0
              value |= (1 &lt;&lt; 26);                                        // Enable MTB Control Register Clock
              Write32(0x40048080, value);                                      // Write modified value to SYSAHBCLKCTRL0
            </block>
          </sequence>

          <!-- ResetCatchSet Sequence LPC84x -->
          <sequence name="ResetCatchSet">
            <block>
              __var SCS_Addr   = 0xE000E000;
              __var DHCSR_Addr = SCS_Addr + 0xDF0;
              __var DEMCR_Addr = SCS_Addr + 0xDFC;
              __var value      = 0;
              __var FPB_BKPT_H = 0x80000000;
              __var FPB_BKPT_L = 0x40000000;
              __var FPB_COMP_M = 0x1FFFFFFC;
              __var FPB_KEY    = 0x00000002;
              __var FPB_ENABLE = 0x00000001;
            </block>

            <control if="Dbg_CR == 0x00000000" info="Stop after bootloader disabled">
              <block>
                value = Read32(DEMCR_Addr);
                Write32(DEMCR_Addr, (value | 0x00000001));                     // Enable Reset Vector Catch in DEMCR
              </block>
            </control>

            <control if="Dbg_CR == 0x00000001" info="Stop after bootloader enabled">
              <block>
                value = Read32(DEMCR_Addr);
                Write32(DEMCR_Addr, (value &amp; (~0x00000001)));              // Disable Reset Vector Catch in DEMCR
              </block>

              <control if="value &lt; 0x20000000" info="Set and enable breakpoint">
                <block>
                  Write32(0x40048000, 0x00000002);                             // Map Flash to Vectors
                  value = Read32 (0x00000004);                                 // Read Reset Vector

                  value = ((value &amp; 0x02) ? FPB_BKPT_H : FPB_BKPT_L) | (value &amp; FPB_COMP_M) | FPB_ENABLE ;
                  Write32(0xE0002008, value);                                  // Set BP0 to Reset Vector
                  Write32(0xE0002000, (FPB_KEY | FPB_ENABLE));                 // Enable FPB
                </block>
              </control>

              <control if="value &gt;= 0x20000000" info="Enable reset vector catch">
                <block>
                  value = Read32(DEMCR_Addr);
                  Write32(DEMCR_Addr, (value | 0x00000001));                   // Enable Reset Vector Catch in DEMCR
                </block>
              </control>
            </control>

            <block>
              Read32(DHCSR_Addr);                                              // Read DHCSR to clear potentially set DHCSR.S_RESET_ST bit
            </block>
          </sequence>

          <!-- ResetCatchClear Sequence LPC84x -->
          <sequence name="ResetCatchClear">
            <block>
              // System Control Space (SCS) offset as defined in ARMv6-M/ARMv7-M.
              // Reimplement this sequence if the SCS is located at a different offset.
              __var SCS_Addr   = 0xE000E000;
              __var DEMCR_Addr = SCS_Addr + 0xDFC;
              __var value      = 0;

              value = Read32(DEMCR_Addr);
              Write32(DEMCR_Addr, (value &amp; (~0x00000001)));                // Disable Reset Vector Catch in DEMCR

              Write32(0xE0002008, 0);                                          // Clear BP0
              Write32(0xE0002000, 0x00000002);                                 // Disable FPB
            </block>
          </sequence>
        </sequences>

        <feature type="SPI"           n="2"/>
        <feature type="WDT"           n="1"                           name="Windowed Watchdog timer"/>
        <feature type="Timer"         n="4"                           name="32-Bit Timer with Input Capture, Output Compare and PWM"/>
        <feature type="ADC"           n="1"       m="12"/>
        <feature type="CoreOther"     n="1"                           name="CRC engine"/>
        <feature type="CoreOther"     n="1"                           name="Unique device serial number"/>

        <!-- *************************  Device 'LPC844M201JBD48'  ***************************** -->
        <device Dname="LPC844M201JBD48">
          <compile header="Device/Include/LPC844.h" define="LPC844M201JBD48"/>
          <debug svd="SVD/LPC844.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00010000" default="1" startup="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00002000" default="1" init   ="0"/>
          <algorithm name="Flash/LPC84x_64.FLM" start="0x00000000" size="0x00010000" default="1"/>

          <feature type="I2C"           n="2"/>
          <feature type="USART"         n="2"/>
          <feature type="IOs"           n="42"/>
          <feature type="QFP"           n="48"                        name="QFP Package"/>
        </device>

        <!-- *************************  Device 'LPC844M201JBD64'  ***************************** -->
        <device Dname="LPC844M201JBD64">
          <compile header="Device/Include/LPC844.h" define="LPC844M201JBD64"/>
          <debug svd="SVD/LPC844.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00010000" default="1" startup="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00002000" default="1" init   ="0"/>
          <algorithm name="Flash/LPC84x_64.FLM" start="0x00000000" size="0x00010000" default="1"/>

          <feature type="I2C"           n="2"/>
          <feature type="USART"         n="2"/>
          <feature type="IOs"           n="54"/>
          <feature type="QFP"           n="64"                        name="QFP Package"/>
        </device>

        <!-- *************************  Device 'LPC844M201JHI33'  ***************************** -->
        <device Dname="LPC844M201JHI33">
          <compile header="Device/Include/LPC844.h" define="LPC844M201JHI33"/>
          <debug svd="SVD/LPC844.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00010000" default="1" startup="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00002000" default="1" init   ="0"/>
          <algorithm name="Flash/LPC84x_64.FLM" start="0x00000000" size="0x00010000" default="1"/>

          <feature type="I2C"           n="2"/>
          <feature type="USART"         n="2"/>
          <feature type="IOs"           n="29"/>
          <feature type="QFN"           n="33"                        name="QFN Package"/>
        </device>

        <!-- *************************  Device 'LPC844M201JHI48'  ***************************** -->
        <device Dname="LPC844M201JHI48">
          <compile header="Device/Include/LPC844.h" define="LPC844M201JHI48"/>
          <debug svd="SVD/LPC844.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00010000" default="1" startup="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00002000" default="1" init   ="0"/>
          <algorithm name="Flash/LPC84x_64.FLM" start="0x00000000" size="0x00010000" default="1"/>

          <feature type="I2C"           n="2"/>
          <feature type="USART"         n="2"/>
          <feature type="IOs"           n="42"/>
          <feature type="QFN"           n="48"                        name="QFN Package"/>
        </device>

        <!-- *************************  Device 'LPC845M301JBD48'  ***************************** -->
        <device Dname="LPC845M301JBD48">
          <compile header="Device/Include/LPC845.h" define="LPC845M301JBD48"/>
          <debug svd="SVD/LPC845.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00010000" default="1" startup="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00004000" default="1" init   ="0"/>
          <algorithm name="Flash/LPC84x_64.FLM" start="0x00000000" size="0x00010000" default="1"/>

          <feature type="I2C"           n="4"/>
          <feature type="USART"         n="5"/>
          <feature type="DAC"           n="2"       m="10"/>
          <feature type="CoreOther"     n="1"                         name="Capacitive Touch Interface"/>
          <feature type="IOs"           n="42"/>
          <feature type="QFP"           n="48"                        name="QFP Package"/>
        </device>

        <!-- *************************  Device 'LPC845M301JBD64'  ***************************** -->
        <device Dname="LPC845M301JBD64">
          <compile header="Device/Include/LPC845.h" define="LPC845M301JBD64"/>
          <debug svd="SVD/LPC845.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00010000" default="1" startup="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00004000" default="1" init   ="0"/>
          <algorithm name="Flash/LPC84x_64.FLM" start="0x00000000" size="0x00010000" default="1"/>

          <feature type="I2C"           n="4"/>
          <feature type="USART"         n="5"/>
          <feature type="DAC"           n="2"       m="10"/>
          <feature type="CoreOther"     n="1"                         name="Capacitive Touch Interface"/>
          <feature type="IOs"           n="54"/>
          <feature type="QFP"           n="64"                        name="QFP Package"/>
        </device>

        <!-- *************************  Device 'LPC845M301JHI33'  ***************************** -->
        <device Dname="LPC845M301JHI33">
          <compile header="Device/Include/LPC845.h" define="LPC845M301JHI33"/>
          <debug svd="SVD/LPC845.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00010000" default="1" startup="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00004000" default="1" init   ="0"/>
          <algorithm name="Flash/LPC84x_64.FLM" start="0x00000000" size="0x00010000" default="1"/>

          <feature type="I2C"           n="4"/>
          <feature type="USART"         n="5"/>
          <feature type="DAC"           n="2"       m="10"/>
          <feature type="CoreOther"     n="1"                         name="Capacitive Touch Interface"/>
          <feature type="IOs"           n="29"/>
          <feature type="QFN"           n="33"                        name="QFN Package"/>
        </device>

        <!-- *************************  Device 'LPC845M301JHI48'  ***************************** -->
        <device Dname="LPC845M301JHI48">
          <compile header="Device/Include/LPC845.h" define="LPC845M301JHI48"/>
          <debug svd="SVD/LPC845.svd"/>
          <memory id="IROM1"                    start="0x00000000" size="0x00010000" default="1" startup="1"/>
          <memory id="IRAM1"                    start="0x10000000" size="0x00004000" default="1" init   ="0"/>
          <algorithm name="Flash/LPC84x_64.FLM" start="0x00000000" size="0x00010000" default="1"/>

          <feature type="I2C"           n="4"/>
          <feature type="USART"         n="5"/>
          <feature type="DAC"           n="2"       m="10"/>
          <feature type="CoreOther"     n="1"                         name="Capacitive Touch Interface"/>
          <feature type="IOs"           n="42"/>
          <feature type="QFN"           n="48"                        name="QFN Package"/>
        </device>
      </subFamily>

    </family>
  </devices>

  <conditions>
    <!-- Compiler Conditions -->
    <condition id="Compiler ARMCC">
      <require Tcompiler="ARMCC"/>
    </condition>

    <!-- Device + CMSIS Conditions -->
    <condition id="LPC802 CMSIS">
      <description>NXP LPC802 Devices and CMSIS-CORE</description>
      <require Dvendor="NXP:11" Dname="LPC802*"/>
      <require Cclass="CMSIS" Cgroup="CORE"/>
    </condition>
    <condition id="LPC804 CMSIS">
      <description>NXP LPC804 Devices and CMSIS-CORE</description>
      <require Dvendor="NXP:11" Dname="LPC804*"/>
      <require Cclass="CMSIS" Cgroup="CORE"/>
    </condition>

    <condition id="LPC8N04 CMSIS">
      <description>NXP LPC8N04 Devices and CMSIS-CORE</description>
      <require Dvendor="NXP:11" Dname="LPC8N04*"/>
      <require Cclass="CMSIS" Cgroup="CORE"/>
    </condition>

    <condition id="LPC810 CMSIS">
      <description>NXP LPC810 Devices and CMSIS-CORE</description>
      <require Dvendor="NXP:11" Dname="LPC810*"/>
      <require Cclass="CMSIS" Cgroup="CORE"/>
    </condition>
    <condition id="LPC811 CMSIS">
      <description>NXP LPC811 Devices and CMSIS-CORE</description>
      <require Dvendor="NXP:11" Dname="LPC811*"/>
      <require Cclass="CMSIS" Cgroup="CORE"/>
    </condition>
    <condition id="LPC812 CMSIS">
      <description>NXP LPC812 Devices and CMSIS-CORE</description>
      <require Dvendor="NXP:11" Dname="LPC812*"/>
      <require Cclass="CMSIS" Cgroup="CORE"/>
    </condition>

    <condition id="LPC822 CMSIS">
      <description>NXP LPC822 Devices and CMSIS-CORE</description>
      <require Dvendor="NXP:11" Dname="LPC822*"/>
      <require Cclass="CMSIS" Cgroup="CORE"/>
    </condition>
    <condition id="LPC824 CMSIS">
      <description>NXP LPC824 Devices and CMSIS-CORE</description>
      <require Dvendor="NXP:11" Dname="LPC824*"/>
      <require Cclass="CMSIS" Cgroup="CORE"/>
    </condition>

    <condition id="LPC83x CMSIS">
      <description>NXP LPC83x Devices and CMSIS-CORE</description>
      <require Dvendor="NXP:11" Dname="LPC83*"/>
      <require Cclass="CMSIS" Cgroup="CORE"/>
    </condition>

    <condition id="LPC844 CMSIS">
      <description>NXP LPC844 Devices and CMSIS-CORE</description>
      <require Dvendor="NXP:11" Dname="LPC844*"/>
      <require Cclass="CMSIS" Cgroup="CORE"/>
    </condition>
    <condition id="LPC845 CMSIS">
      <description>NXP LPC845 Devices and CMSIS-CORE</description>
      <require Dvendor="NXP:11" Dname="LPC845*"/>
      <require Cclass="CMSIS" Cgroup="CORE"/>
    </condition>
  </conditions>

  <components>
    <!-- Startup LPC802 -->
    <component Cclass="Device" Cgroup="Startup" Cversion="2.0.0" condition="LPC802 CMSIS">
      <description>System Startup for NXP LPC802 Devices</description>
      <files>
        <!-- include folder / file -->
        <file category="include" name="Device/Include/"/>
        <!-- startup / system file -->
        <file category="source"  name="Device/Source/ARM/startup_LPC802.s" attr="config" version="1.1.0" condition="Compiler ARMCC"/>
        <file category="source"  name="Device/Source/system_LPC802.c"      attr="config" version="1.1.0"/>
      </files>
    </component>

    <!-- Startup LPC804 -->
    <component Cclass="Device" Cgroup="Startup" Cversion="2.0.0" condition="LPC804 CMSIS">
      <description>System Startup for NXP LPC804 Devices</description>
      <files>
        <!-- include folder / file -->
        <file category="include" name="Device/Include/"/>
        <!-- startup / system file -->
        <file category="source"  name="Device/Source/ARM/startup_LPC804.s" attr="config" version="1.1.0" condition="Compiler ARMCC"/>
        <file category="source"  name="Device/Source/system_LPC804.c"      attr="config" version="1.1.0"/>
      </files>
    </component>

    <!-- Startup LPC8N04 -->
    <component Cclass="Device" Cgroup="Startup" Cversion="2.0.0" condition="LPC8N04 CMSIS">
      <description>System Startup for NXP LPC8N04 Devices</description>
      <files>
        <!-- include folder / file -->
        <file category="include" name="Device/Include/"/>
        <!-- startup / system file -->
        <file category="source"  name="Device/Source/ARM/startup_LPC8N04.s" attr="config" version="1.0.0" condition="Compiler ARMCC"/>
        <file category="source"  name="Device/Source/system_LPC8N04.c"      attr="config" version="1.0.0"/>
      </files>
    </component>

    <!-- Startup LPC810 -->
    <component Cclass="Device" Cgroup="Startup" Cversion="2.0.0" condition="LPC810 CMSIS">
      <description>System Startup for NXP LPC810 Devices</description>
      <files>
        <!-- include folder / file -->
        <file category="include" name="Device/Include/"/>
        <!-- startup / system file -->
        <file category="source"  name="Device/Source/ARM/startup_LPC810.s" attr="config" version="1.2.0" condition="Compiler ARMCC"/>
        <file category="source"  name="Device/Source/system_LPC810.c"      attr="config" version="1.2.0"/>
      </files>
    </component>

    <!-- Startup LPC811 -->
    <component Cclass="Device" Cgroup="Startup" Cversion="2.0.0" condition="LPC811 CMSIS">
      <description>System Startup for NXP LPC811 Devices</description>
      <files>
        <!-- include folder / file -->
        <file category="include" name="Device/Include/"/>
        <!-- startup / system file -->
        <file category="source"  name="Device/Source/ARM/startup_LPC811.s" attr="config" version="1.2.0" condition="Compiler ARMCC"/>
        <file category="source"  name="Device/Source/system_LPC811.c"      attr="config" version="1.2.0"/>
      </files>
    </component>

    <!-- Startup LPC812 -->
    <component Cclass="Device" Cgroup="Startup" Cversion="2.0.0" condition="LPC812 CMSIS">
      <description>System Startup for NXP LPC812 Devices</description>
      <files>
        <!-- include folder / file -->
        <file category="include" name="Device/Include/"/>
        <!-- startup / system file -->
        <file category="source"  name="Device/Source/ARM/startup_LPC812.s" attr="config" version="1.2.0" condition="Compiler ARMCC"/>
        <file category="source"  name="Device/Source/system_LPC812.c"      attr="config" version="1.2.0"/>
      </files>
    </component>

    <!-- Startup LPC822 -->
    <component Cclass="Device" Cgroup="Startup" Cversion="2.0.0" condition="LPC822 CMSIS">
      <description>System Startup for NXP LPC822 Devices</description>
      <files>
        <!-- include folder / file -->
        <file category="include" name="Device/Include/"/>
        <!-- startup / system file -->
        <file category="source"  name="Device/Source/ARM/startup_LPC822.s" attr="config" version="1.2.0" condition="Compiler ARMCC"/>
        <file category="source"  name="Device/Source/system_LPC822.c"      attr="config" version="1.2.0"/>
      </files>
    </component>

    <!-- Startup LPC824 -->
    <component Cclass="Device" Cgroup="Startup" Cversion="2.0.0" condition="LPC824 CMSIS">
      <description>System Startup for NXP LPC824 Devices</description>
      <files>
        <!-- include folder / file -->
        <file category="include" name="Device/Include/"/>
        <!-- startup / system file -->
        <file category="source"  name="Device/Source/ARM/startup_LPC824.s" attr="config" version="1.2.0" condition="Compiler ARMCC"/>
        <file category="source"  name="Device/Source/system_LPC824.c"      attr="config" version="1.2.0"/>
      </files>
    </component>

    <!-- Startup LPC83x -->
    <component Cclass="Device" Cgroup="Startup" Cversion="2.0.0" condition="LPC83x CMSIS">
      <description>System Startup for NXP LPC83x Devices</description>
      <files>
        <!-- include folder / file -->
        <file category="include" name="Device/Include/"/>
        <!-- startup / system file -->
        <file category="source"  name="Device/Source/ARM/startup_LPC83x.s" attr="config" version="1.2.0" condition="Compiler ARMCC"/>
        <file category="source"  name="Device/Source/system_LPC83x.c"      attr="config" version="1.2.0"/>
      </files>
    </component>

    <!-- Startup LPC844 -->
    <component Cclass="Device" Cgroup="Startup" Cversion="2.0.0" condition="LPC844 CMSIS">
      <description>System Startup for NXP LPC844 Devices</description>
      <files>
        <!-- include folder / file -->
        <file category="include" name="Device/Include/"/>
        <!-- startup / system file -->
        <file category="source"  name="Device/Source/ARM/startup_LPC844.s" attr="config" version="1.2.0" condition="Compiler ARMCC"/>
        <file category="source"  name="Device/Source/system_LPC844.c"      attr="config" version="1.2.0"/>
      </files>
    </component>

    <!-- Startup LPC845 -->
    <component Cclass="Device" Cgroup="Startup" Cversion="2.0.0" condition="LPC845 CMSIS">
      <description>System Startup for NXP LPC845 Devices</description>
      <files>
        <!-- include folder / file -->
        <file category="include" name="Device/Include/"/>
        <!-- startup / system file -->
        <file category="source"  name="Device/Source/ARM/startup_LPC845.s" attr="config" version="1.2.0" condition="Compiler ARMCC"/>
        <file category="source"  name="Device/Source/system_LPC845.c"      attr="config" version="1.2.0"/>
      </files>
    </component>

    <!-- LPC812 LPCXpresso Board Support -->
    <bundle Cbundle="LPC812 LPCXpresso" Cclass="Board Support" Cversion="1.0.0">
      <description>NXP LPC812 LPCXpresso Board</description>
      <doc></doc>
      <component Cgroup="LED" Capiversion="1.00" condition="LPC812 CMSIS">
      <description>LED driver for NXP LPC812 LPCXpresso Board</description>
        <files>
          <file category="source" name="Boards/NXP/LPC812-LPCXpresso/Common/LED_LPC812-LPCXpresso.c"/>
        </files>
      </component>
      <component Cgroup="Comparator" condition="LPC812 CMSIS">
      <description>Comparator driver for NXP LPC812 LPCXpresso Board</description>
        <files>
          <file category="source" name="Boards/NXP/LPC812-LPCXpresso/Common/Comparator_LPC812-LPCXpresso.c"/>
          <file category="header" name="Boards/NXP/LPC812-LPCXpresso/Common/Comparator_LPC812-LPCXpresso.h"/>
        </files>
      </component>
    </bundle>

    <!-- LPC824 LPCXpresso Board Support -->
    <bundle Cbundle="LPCXpresso824-MAX" Cclass="Board Support" Cversion="1.0.0">
      <description>NXP LPCXpresso824-MAX Board</description>
      <doc></doc>
      <component Cgroup="LED"     Capiversion="1.0.0" condition="LPC824 CMSIS">
      <description>LED driver for LPCXpresso824-MAX Board</description>
        <files>
          <file category="source" name="Boards/NXP/LPCXpresso824-MAX/Common/LED_LPCXpresso824-MAX.c"/>
        </files>
      </component>
      <component Cgroup="Buttons" Capiversion="1.0.0" condition="LPC824 CMSIS">
      <description>Button driver for NXP LPCXpresso824-MAX Board</description>
        <files>
        <file category="sourceC" name="Boards/NXP/LPCXpresso824-MAX/Common/Buttons_LPCXpresso824-MAX.c"/>
        </files>
      </component>
    </bundle>

    <!-- LPCXpresso845-MAX Board Support -->
    <bundle Cbundle="LPCXpresso845-MAX" Cclass="Board Support" Cversion="1.0.0">
      <description>NXP LPCXpresso845-MAX Board</description>
      <doc></doc>
      <component Cgroup="LED"     Capiversion="1.0.0" condition="LPC845 CMSIS">
      <description>LED driver for NXP LPCXpresso845-MAX Board</description>
        <files>
          <file category="source" name="Boards/NXP/LPCXpresso845-MAX/Common/LED_LPCXpresso845-MAX.c"/>
        </files>
      </component>
      <component Cgroup="Buttons" Capiversion="1.0.0" condition="LPC845 CMSIS">
      <description>Button driver for NXP LPCXpresso845-MAX Board</description>
        <files>
        <file category="sourceC" name="Boards/NXP/LPCXpresso845-MAX/Common/Buttons_LPCXpresso845-MAX.c"/>
        </files>
      </component>
    </bundle>

  </components>

  <boards>
    <board vendor="NXP" name="LPC812 LPCXpresso" revision="Rev. A" salesContact="http://www.nxp.com/support.html" orderForm="http://www.nxp.com/demoboard/OM13053.html#ordering">
      <description>NXP LPC812 LPCXpresso Board</description>
      <book category="overview"  name="http://www.nxp.com/demoboard/OM13053.html"  title="LPC812 LPCXpresso Board"/>
      <image public="1" large="https://www.nxp.com/assets/images/en/photography/OM13053_lpc812_Xpresso.png" small="https://www.nxp.com/assets/images/en/photography/OM13053_lpc812_Xpresso.png"/>
      <mountedDevice    deviceIndex="0" Dvendor="NXP:11" Dname="LPC812M101JDH20"/>
      <compatibleDevice deviceIndex="0" Dvendor="NXP:11" DsubFamily="LPC81x"/>
      <feature type="XTAL"            n="12000000"/>
      <feature type="PWR"             n="5"              name="USB Powered"/>
      <feature type="Poti"            n="1"              name="Potentiometer for ADC Input"/>
      <feature type="LED"             n="1"              name="I/O Port RGB LED"/>
      <feature type="ODbg"            n="1"              name="LPC-Link"/>
    </board>

    <board vendor="NXP" name="LPCXpresso824-MAX" revision="Rev. 1" salesContact="http://www.nxp.com/support.html">
      <description>NXP LPCXpresso824-MAX Board</description>
      <book category="overview"  name="http://www.nxp.com/demoboard/OM13071.html"  title="LPC824-MAX LPCXpresso Board"/>
      <image public="1" large="https://www.nxp.com/assets/images/en/photography/OM13071_PC824v2_LR_Main.jpg"
                        small="https://www.nxp.com/assets/images/en/photography/OM13071_PC824v2_LR_Main.jpg"/>
      <mountedDevice    deviceIndex="0" Dvendor="NXP:11" Dname="LPC824M201JHI33"/>
      <compatibleDevice deviceIndex="0" Dvendor="NXP:11" DsubFamily="LPC824"/>
      <book category="setup" name="Documents/NXP824_Blinky_Lab.pdf" title="LPCXpresso824-MAX: Blinky Lab"/>
      <feature type="XTAL"            n="12000000"/>
      <feature type="PWR"             n="5"              name="USB Powered"/>
      <feature type="LED"             n="1"              name="I/O Port RGB LED"/>
      <feature type="Button"          n="3"              name="Reset, Wake, User button"/>
      <feature type="ODbg"            n="1"              name="LPC-Link"/>
      <debugInterface adapter="JTAG/SW" connector="10 pin Cortex debug (0.05 inch connector)"/>
    </board>

    <board vendor="NXP" name="LPCXpresso845-MAX" revision="Rev. 2" salesContact="http://www.nxp.com/support.html">
      <description>NXP LPCXpresso845-MAX Board</description>
      <book category="overview"  name="http://www.nxp.com/demoboard/OM13097.html"  title="LPC845-MAX LPCXpresso Board"/>
      <image public="1" large="https://www.nxp.com/assets/images/en/dev-board-image/OM13097-LPCXpresso845-MAX-Board.jpg"
                        small="https://www.nxp.com/assets/images/en/dev-board-image/OM13097-LPCXpresso845-MAX-Board.jpg"/>
      <mountedDevice    deviceIndex="0" Dvendor="NXP:11" Dname="LPC845M301JBD64"/>
      <compatibleDevice deviceIndex="0" Dvendor="NXP:11" DsubFamily="LPC845"/>
      <feature type="XTAL"            n="12000000"/>
      <feature type="PWR"             n="5"              name="USB Powered"/>
      <feature type="LED"             n="1"              name="I/O Port RGB LED"/>
      <feature type="Button"          n="3"              name="Reset, Wake, ISP"/>
      <feature type="ODbg"            n="1"              name="LPC-Link"/>
      <debugInterface adapter="JTAG/SW" connector="10 pin Cortex debug (0.05 inch connector)"/>
    </board>
  </boards>

  <examples>
    <!-- LPC812 LPCXpresso Board -->
    <example name="CMSIS-RTOS Blinky" doc="Abstract.txt" folder="Boards/NXP/LPC812-LPCXpresso/RTX_Blinky">
      <description>CMSIS-RTOS based Blinky example</description>
      <board name="LPC812 LPCXpresso" vendor="NXP"/>
      <project>
        <environment name="uv" load="Blinky.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <component Cclass="CMSIS" Cgroup="RTOS"/>
        <category>Getting Started</category>
        <category>CMSIS-RTX</category>
      </attributes>
    </example>
    <example name="Blinky" doc="Abstract.txt" folder="Boards/NXP/LPC812-LPCXpresso/Blinky">
      <description>Blinky example</description>
      <board name="LPC812 LPCXpresso" vendor="NXP"/>
      <project>
        <environment name="uv" load="Blinky.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
      </attributes>
    </example>

    <!-- LPC824 LPCXpresso Board -->
    <example name="CMSIS-RTOS2 (Keil RTX5) Blinky" doc="Abstract.txt" folder="Boards/NXP/LPCXpresso824-MAX/RTOS2_KeilRTX5_Blinky">
      <description>CMSIS-RTOS2 (Keil RTX5) based Blinky example</description>
      <board name="LPCXpresso824-MAX" vendor="NXP"/>
      <project>
        <environment name="uv" load="Blinky.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="CMSIS" Cgroup="RTOS"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
        <category>CMSIS-RTX</category>
      </attributes>
    </example>

    <!-- LPCXpresso845-MAX Board -->
    <example name="CMSIS-RTOS2 (Keil RTX5) Blinky" doc="Abstract.txt" folder="Boards/NXP/LPCXpresso845-MAX/RTOS2_KeilRTX5_Blinky">
      <description>CMSIS-RTOS2 (Keil RTX5) based Blinky example</description>
      <board name="LPCXpresso845-MAX" vendor="NXP"/>
      <project>
        <environment name="uv" load="Blinky.uvprojx"/>
      </project>
      <attributes>
        <component Cclass="CMSIS" Cgroup="CORE"/>
        <component Cclass="CMSIS" Cgroup="RTOS"/>
        <component Cclass="Device" Cgroup="Startup"/>
        <category>Getting Started</category>
        <category>CMSIS-RTX</category>
      </attributes>
    </example>
  </examples>

</package>
