<?xml version='1.0' encoding='UTF-8'?>
<package xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="PACK.xsd" schemaVersion="1.4">
  <vendor>NXP</vendor>
  <name>FRDM-KL46Z_BSP</name>
  <description>Board Support Pack for FRDM-KL46Z</description>
  <license>Licenses.txt</license>
  <url>http://mcuxpresso.nxp.com/cmsis_pack/repo/</url>
  <releases>
    <release version="10.0.3" date="2018-07-16">A problem with missing components from some example the projects were dependent on was fixed (KEX-4241); Incorrect path to linked libraries were fixed: a pack version was a static part of the path and hadnâ€™t worked for pack versions other than v10.0.0 (KEX-4373); A problem with incorrectly defined XIP_BOOT_HEADER_ENABLE, XIP_BOOT_HEADER_DCD_ENABLE and XIP_EXTERNAL_FLASH preprocessor symbols was fixed (KEX-4553); Missing flash algorithms for MK27, MK28, LPC802 and LPC804 device family packs were added (KEX-4659).</release>
    <release version="10.0.2" date="2018-05-25">NXP CMSIS packs based on MCUXpresso SDK 2.4.0</release>
    <release version="10.0.1" date="2018-04-04">NXP CMSIS packs based on MCUXpresso SDK 2.3.1</release>
    <release version="10.0.0" date="2018-01-19">NXP CMSIS packs with updated Clear BSD license, based on MCUXpresso SDK 2.3.0. NXP CMSIS pack will maintain independent versioning starting with 10.0.0</release>
    <release version="2.3.0" date="2017-11-17">NXP MCUXpresso SDK 2.3.0 CMSIS packs with updated Clear BSD license</release>
  </releases>
  <keywords>
    <keyword>Board Support Pack</keyword>
  </keywords>
  <boards>
    <board vendor="NXP" name="FRDM-KL46Z">
      <description>The Freedom KL46Z is an ultra-low-cost development platform enabled by the Kinetis(r) L series KL4x MCU family built on the ARM(r) Cortex(r)-M0+ processor.</description>
      <mountedDevice Dname="MKL46Z256xxx4" Dvendor="NXP:11"/>
    </board>
  </boards>
  <conditions>
    <condition id="project_template.frdmkl46z">
      <accept Dvendor="NXP:11" Dname="MKL46Z128???4"/>
      <accept Dvendor="NXP:11" Dname="MKL46Z256???4"/>
      <require Cclass="CMSIS" Cgroup="CORE" Cversion="5.0.1"/>
      <require Cclass="Device" Cgroup="Startup"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="clock"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="flash"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="gpio"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="i2c"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="lpsci"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="port"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="smc"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="uart"/>
      <require Cclass="Device" Cgroup="SDK Utilities" Csub="debug_console"/>
    </condition>
  </conditions>
  <examples>
    <example name="cmsis_i2c_dma_b2b_transfer_master" folder="cmsis_driver_examples/i2c/dma_b2b_transfer/master" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_dma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with DMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cmsis_i2c_dma_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/cmsis_i2c_dma_b2b_transfer_master.ewp"/>
      </project>
      <attributes>
        <category>cmsis driver examples/i2c/dma b2b transfer/master</category>
      </attributes>
    </example>
    <example name="cmsis_i2c_dma_b2b_transfer_slave" folder="cmsis_driver_examples/i2c/dma_b2b_transfer/slave" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_dma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a DMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cmsis_i2c_dma_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/cmsis_i2c_dma_b2b_transfer_slave.ewp"/>
      </project>
      <attributes>
        <category>cmsis driver examples/i2c/dma b2b transfer/slave</category>
      </attributes>
    </example>
    <example name="cmsis_i2c_int_b2b_transfer_master" folder="cmsis_driver_examples/i2c/int_b2b_transfer/master" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cmsis_i2c_int_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/cmsis_i2c_int_b2b_transfer_master.ewp"/>
      </project>
      <attributes>
        <category>cmsis driver examples/i2c/int b2b transfer/master</category>
      </attributes>
    </example>
    <example name="cmsis_i2c_int_b2b_transfer_slave" folder="cmsis_driver_examples/i2c/int_b2b_transfer/slave" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The i2c_interrupt_b2b_transfer_master example shows how to use CMSIS i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cmsis_i2c_int_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/cmsis_i2c_int_b2b_transfer_slave.ewp"/>
      </project>
      <attributes>
        <category>cmsis driver examples/i2c/int b2b transfer/slave</category>
      </attributes>
    </example>
    <example name="cmsis_i2c_read_accel_value_transfer" folder="cmsis_driver_examples/i2c/read_accel_value_transfer" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_i2c_read_accel_value example shows how to use CMSIS I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cmsis_i2c_read_accel_value_transfer.uvprojx"/>
        <environment name="iar" load="iar/cmsis_i2c_read_accel_value_transfer.ewp"/>
      </project>
      <attributes>
        <category>cmsis driver examples/i2c/read accel value transfer</category>
      </attributes>
    </example>
    <example name="cmsis_lpsci_dma_transfer" folder="cmsis_driver_examples/lpsci/dma_transfer" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpsci_dma_transfer.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpsci_dma_transfer.ewp"/>
      </project>
      <attributes>
        <category>cmsis driver examples/lpsci/dma transfer</category>
      </attributes>
    </example>
    <example name="cmsis_lpsci_interrupt_transfer" folder="cmsis_driver_examples/lpsci/interrupt_transfer" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cmsis_lpsci_interrupt_transfer.uvprojx"/>
        <environment name="iar" load="iar/cmsis_lpsci_interrupt_transfer.ewp"/>
      </project>
      <attributes>
        <category>cmsis driver examples/lpsci/interrupt transfer</category>
      </attributes>
    </example>
    <example name="cmsis_spi_dma_b2b_transfer_master" folder="cmsis_driver_examples/spi/dma_b2b_transfer/master" doc="readme.txt">
      <description>The spi_dma_b2b_transfer example shows how to use SPI CMSIS driver in dma way:In this example , we need two boards, one board used as SPI master and another board used as SPI slave.The file 'spi_dma_b2b_transfer_master.c' includes the SPI master code.1. SPI master send/received data to/from SPI slave in dma . </description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cmsis_spi_dma_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/cmsis_spi_dma_b2b_transfer_master.ewp"/>
      </project>
      <attributes>
        <category>cmsis driver examples/spi/dma b2b transfer/master</category>
      </attributes>
    </example>
    <example name="cmsis_spi_dma_b2b_transfer_slave" folder="cmsis_driver_examples/spi/dma_b2b_transfer/slave" doc="readme.txt">
      <description>The spi_dma_b2b_transfer example shows how to use SPI CMSIS driver in dma way:In this example , we need two boards, one board used as SPI master and another board used as SPI slave.The file 'spi_dma_b2b_transfer_slave.c' includes the SPI slave code.1. SPI master send/received data to/from SPI slave in dma . </description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cmsis_spi_dma_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/cmsis_spi_dma_b2b_transfer_slave.ewp"/>
      </project>
      <attributes>
        <category>cmsis driver examples/spi/dma b2b transfer/slave</category>
      </attributes>
    </example>
    <example name="cmsis_spi_interrupt_b2b_transfer_master" folder="cmsis_driver_examples/spi/interrupt_b2b_transfer/master" doc="readme.txt">
      <description>The spi_interrupt_b2b_transfer example shows how to use spi CMSIS driver in interrupt way:In this example , we need two boards, one board used as spi master and another board used as spi slave.The file 'spi_interrupt_b2b_transfer_master.c' includes the spi master code.This example uses the transactional API in spi driver.1. spi master send/received data to/from spi slave in interrupt . </description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cmsis_spi_interrupt_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/cmsis_spi_interrupt_b2b_transfer_master.ewp"/>
      </project>
      <attributes>
        <category>cmsis driver examples/spi/interrupt b2b transfer/master</category>
      </attributes>
    </example>
    <example name="cmsis_spi_interrupt_b2b_transfer_slave" folder="cmsis_driver_examples/spi/interrupt_b2b_transfer/slave" doc="readme.txt">
      <description>The spi_interrupt_b2b_transfer example shows how to use SPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as SPI master and another board used as SPI slave.The file 'spi_interrupt_b2b_transfer_slave.c' includes the SPI slave code.This example uses the transactional API in SPI driver.1. SPI master send/received data to/from SPI slave in interrupt . </description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cmsis_spi_interrupt_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/cmsis_spi_interrupt_b2b_transfer_slave.ewp"/>
      </project>
      <attributes>
        <category>cmsis driver examples/spi/interrupt b2b transfer/slave</category>
      </attributes>
    </example>
    <example name="cmsis_uart_dma_transfer" folder="cmsis_driver_examples/uart/dma_transfer" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cmsis_uart_dma_transfer.uvprojx"/>
        <environment name="iar" load="iar/cmsis_uart_dma_transfer.ewp"/>
      </project>
      <attributes>
        <category>cmsis driver examples/uart/dma transfer</category>
      </attributes>
    </example>
    <example name="cmsis_uart_interrupt_transfer" folder="cmsis_driver_examples/uart/interrupt_transfer" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cmsis_uart_interrupt_transfer.uvprojx"/>
        <environment name="iar" load="iar/cmsis_uart_interrupt_transfer.ewp"/>
      </project>
      <attributes>
        <category>cmsis driver examples/uart/interrupt transfer</category>
      </attributes>
    </example>
    <example name="adc16_low_power" folder="demo_apps/adc16_low_power" doc="readme.txt">
      <description>The ADC Low Power demo application demonstrates the usage of the ADC peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 500 ms, an interrupt wakes up the ADC module andreads the current temperature of the microcontroller. While the temperature remains within boundaries, both LEDs are on.If the core temperature is higher or lower than average, the LEDs change state respectively.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/adc16_low_power.uvprojx"/>
        <environment name="iar" load="iar/adc16_low_power.ewp"/>
      </project>
      <attributes>
        <category>demo apps/adc16 low power</category>
      </attributes>
    </example>
    <example name="adc16_low_power_async_dma" folder="demo_apps/adc16_low_power_async_dma" doc="readme.txt">
      <description>The ADC Low Power Async DMA demo application demonstrates the usage of the ADC and DMA peripheral while in a low power mode. Themicrocontroller is first set to very low power stop (VLPS) mode. Every 100 ms, low power timer trigger the ADC module convertvalue on ADC channel. After 16 times(1,6s) the DMA transfer finish interrupt wake up the CPU to process sampled data, print result touser and toggle LED.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/adc16_low_power_async_dma.uvprojx"/>
        <environment name="iar" load="iar/adc16_low_power_async_dma.ewp"/>
      </project>
      <attributes>
        <category>demo apps/adc16 low power async dma</category>
      </attributes>
    </example>
    <example name="bubble" folder="demo_apps/bubble" doc="readme.txt">
      <description>The EEPROM flash demo application demonstrates the use of the LPI2C IP and driver to read and write data from anexternal EEPROM device.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/bubble.uvprojx"/>
        <environment name="iar" load="iar/bubble.ewp"/>
      </project>
      <attributes>
        <category>demo apps/bubble</category>
      </attributes>
    </example>
    <example name="bubble_peripheral" folder="demo_apps/bubble_peripheral" doc="readme.txt">
      <description>The EEPROM flash demo application demonstrates the use of the LPI2C IP and driver to read and write data from anexternal EEPROM device.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/bubble_peripheral.uvprojx"/>
        <environment name="iar" load="iar/bubble_peripheral.ewp"/>
      </project>
      <attributes>
        <category>demo apps/bubble peripheral</category>
      </attributes>
    </example>
    <example name="dac_adc" folder="demo_apps/dac_adc" doc="readme.txt">
      <description>The DAC / ADC demo application demonstrates the use of the DAC and ADC peripherals. This application demonstrates how toconfigure the DAC and set the output on the DAC. This demo also demonstrates how to configure the ADC in 'Blocking Mode'and how to read ADC values.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/dac_adc.uvprojx"/>
        <environment name="iar" load="iar/dac_adc.ewp"/>
      </project>
      <attributes>
        <category>demo apps/dac adc</category>
      </attributes>
    </example>
    <example name="hello_world" folder="demo_apps/hello_world" doc="readme.txt">
      <description>The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the "Hello World" string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/hello_world.uvprojx"/>
        <environment name="iar" load="iar/hello_world.ewp"/>
      </project>
      <attributes>
        <category>demo apps/hello world</category>
      </attributes>
    </example>
    <example name="led_blinky" folder="demo_apps/led_blinky" doc="readme.txt">
      <description>The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/led_blinky.uvprojx"/>
        <environment name="iar" load="iar/led_blinky.ewp"/>
      </project>
      <attributes>
        <category>demo apps/led blinky</category>
      </attributes>
    </example>
    <example name="power_manager" folder="demo_apps/power_manager" doc="readme.txt">
      <description>The Power manager demo application demonstrates the use of power modes in the KSDK. The demo use the notification mechanismand prints the power mode menu through the debug console, where the user can set the MCU to a specific power mode. The usercan also set the wakeup source by following the debug console prompts. The purpose of this demo is to demonstrate theimplementation of a power mode manager. The callback can be registered to the framework. If a power mode transition happens,the callback will be called and user can do something. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/power_manager.uvprojx"/>
        <environment name="iar" load="iar/power_manager.ewp"/>
      </project>
      <attributes>
        <category>demo apps/power manager</category>
      </attributes>
    </example>
    <example name="power_mode_switch" folder="demo_apps/power_mode_switch" doc="readme.txt">
      <description>The Power mode switch demo application demonstrates the use of power modes in the KSDK. The demo prints the power mode menuthrough the debug console, where the user can set the MCU to a specific power mode. The user can also set the wakeupsource by following the debug console prompts. The purpose of this demo is to show how to switch between different power modes, and how to configure a wakeup source and wakeup the MCU from low power modes. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - Debug pins(e.g SWD_DIO) would consume addtional power, had better to disable related pins or disconnect them. </description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/power_mode_switch.uvprojx"/>
        <environment name="iar" load="iar/power_mode_switch.ewp"/>
      </project>
      <attributes>
        <category>demo apps/power mode switch</category>
      </attributes>
    </example>
    <example name="shell" folder="demo_apps/shell" doc="readme.txt">
      <description>The Shell Demo application demonstrates to control Leds by commands.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/shell.uvprojx"/>
        <environment name="iar" load="iar/shell.ewp"/>
      </project>
      <attributes>
        <category>demo apps/shell</category>
      </attributes>
    </example>
    <example name="adc16_continuous_dma" folder="driver_examples/adc16/continuous_dma" doc="readme.txt">
      <description>The ADC16 continuous DMA demo application demonstrates the usage of the ADC and DMA peripheral while in a continuous mode. TheADC16 is first set to continuous mode. In continuous convert configuration, only the initial rising-edge to launch continuous conversions isobserved, and until conversion is aborted, the ADC16 continues to do conversions on the same SCn register that initiated the conversion. DMA request will be asserted during an ADC16 conversion complete event noted when any of the SC1n[COCO] flags is asserted. DMA will transferADC16 results to memory and if users press any key, demo will average ADC16 results stored in memory and print average on the terminal.  </description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/adc16_continuous_dma.uvprojx"/>
        <environment name="iar" load="iar/adc16_continuous_dma.ewp"/>
      </project>
      <attributes>
        <category>driver examples/adc16/continuous dma</category>
      </attributes>
    </example>
    <example name="adc16_interrupt" folder="driver_examples/adc16/interrupt" doc="readme.txt">
      <description>The adc16_interrupt example shows how to use interrupt with ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. ADC interrupt would be asserted once the conversion is completed. In ADC ISR, the conversion completed flag would be cleared by reading the conversion result value. Also, the conversion result value is stored, and the ISR counter is increased. These information would be printed when the execution return to the main loop.The point is that the ADC16 interrupt configuration is set when configuring the ADC16's conversion channel. When in software trigger mode, the conversion would be launched by the operation of configuring channel, just like writing aconversion command. So if user wants to generate the interrupt every time the conversion is completed, the channel's configuration with enabling interrupt setting would be used for each conversion.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/adc16_interrupt.uvprojx"/>
        <environment name="iar" load="iar/adc16_interrupt.ewp"/>
      </project>
      <attributes>
        <category>driver examples/adc16/interrupt</category>
      </attributes>
    </example>
    <example name="adc16_polling" folder="driver_examples/adc16/polling" doc="readme.txt">
      <description>The adc16_polling example shows the simplest way to use ADC16 driver.In this example, user should indicate a channel to provide a voltage signal (can be controlled by user) as the ADC16'ssample input. When running the project, typing any key into debug console would trigger the conversion. The execution would check the conversion completed flag in loop until the flag is asserted, which means the conversion is completed. Then read the conversion result value and print it to debug console.Note, the default setting of initialization for the ADC converter is just an available configuration. User can changethe configuration structure's setting in application to fit the special requirement.The auto-calibration is not essential but strongly recommended. It can help to adjust the converter itself and improvethe ADC16's performance.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/adc16_polling.uvprojx"/>
        <environment name="iar" load="iar/adc16_polling.ewp"/>
      </project>
      <attributes>
        <category>driver examples/adc16/polling</category>
      </attributes>
    </example>
    <example name="cmp_interrupt" folder="driver_examples/cmp/interrupt" doc="readme.txt">
      <description>The CMP interrupt Example shows how to use interrupt with CMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any CMP interrupt happens, the CMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cmp_interrupt.uvprojx"/>
        <environment name="iar" load="iar/cmp_interrupt.ewp"/>
      </project>
      <attributes>
        <category>driver examples/cmp/interrupt</category>
      </attributes>
    </example>
    <example name="cmp_polling" folder="driver_examples/cmp/polling" doc="readme.txt">
      <description>The CMP polling Example shows the simplest way to use CMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cmp_polling.uvprojx"/>
        <environment name="iar" load="iar/cmp_polling.ewp"/>
      </project>
      <attributes>
        <category>driver examples/cmp/polling</category>
      </attributes>
    </example>
    <example name="cop" folder="driver_examples/cop" doc="readme.txt">
      <description>The COP Example project is to demonstrate usage of the KSDK cop driver.In this example, after 10 times of refreshing, a timeout reset is generated.Please notice that because COP control registers are write-once only, so the COP_Init function and the COP_Disable function can be called only once after reset.In SystemInit() function which is called in startup code, there is an operation to disable the watchdog if macro DISABLE_WDOG is defined as 0, and by default if the DISABLE_WDOG is not defined, the DISABLE_WDOG is defined as 1. So this example has a special project setting that defines the DISABLE_WDOG macro to 0 so the startup code will skip the disable COP WDOG operation.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/cop.uvprojx"/>
        <environment name="iar" load="iar/cop.ewp"/>
      </project>
      <attributes>
        <category>driver examples/cop</category>
      </attributes>
    </example>
    <example name="dac_basic" folder="driver_examples/dac/basic" doc="readme.txt">
      <description>The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/dac_basic.uvprojx"/>
        <environment name="iar" load="iar/dac_basic.ewp"/>
      </project>
      <attributes>
        <category>driver examples/dac/basic</category>
      </attributes>
    </example>
    <example name="dac_buffer_interrupt" folder="driver_examples/dac/buffer_interrupt" doc="readme.txt">
      <description>The dac_buffer_interrupt example shows how to use DAC buffer with interrupts.When the DAC's buffer feature is enabled, user can benefit from the automation of updating DAC output by hardware/software trigger. As we know, the DAC converter outputs the value of item pointed by current read pointer. Once the buffer is triggered by software or hardware, the buffer's read pointer would move automatically as the work mode is set,like normal (cycle) mode, swing mode, one-time-scan mode or FIFO mode.In this example, it captures the user's type-in operation from terminal and does the software trigger to the buffer.The terminal would also display the log that shows the current buffer pointer's position with buffer events.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/dac_buffer_interrupt.uvprojx"/>
        <environment name="iar" load="iar/dac_buffer_interrupt.ewp"/>
      </project>
      <attributes>
        <category>driver examples/dac/buffer interrupt</category>
      </attributes>
    </example>
    <example name="dac_continuous_pit_dma" folder="driver_examples/dac/continuous_pit_dma" doc="readme.txt">
      <description>The demo shows how to use the PIT to generate a DAC trigger and use the DMA to transfer data into DAC buffer.In this example, DAC is first set to normal buffer mode. PIT is as DAC hardware trigger source and DMA would work when DAC read pointer is zero. When run the example, the DAC is triggered by PIT and the read pointer increases by one,every time the trigger occurs. When the read pointer reaches the upper limit, it goes to zero directly in the next trigger event.While read pointer goes to zero, DMA request will be triggered and transfer data into DAC buffer. The user should probethe DAC output with a oscilloscope to see the Half-sine signal.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/dac_continuous_pit_dma.uvprojx"/>
        <environment name="iar" load="iar/dac_continuous_pit_dma.ewp"/>
      </project>
      <attributes>
        <category>driver examples/dac/continuous pit dma</category>
      </attributes>
    </example>
    <example name="dma_memory_to_memory" folder="driver_examples/dma/memory_to_memory" doc="readme.txt">
      <description>The DMA memory to memory example is a simple demonstration program that uses the SDK software.It executes one shot transfer from source buffer to destination buffer using the SDK DMA drivers.The purpose of this example is to show how to use the DMA and to provide a simple example fordebugging and further development.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/dma_memory_to_memory.uvprojx"/>
        <environment name="iar" load="iar/dma_memory_to_memory.ewp"/>
      </project>
      <attributes>
        <category>driver examples/dma/memory to memory</category>
      </attributes>
    </example>
    <example name="pflash" folder="driver_examples/flash/pflash" doc="readme.txt">
      <description>The pflash example shows how to use flash driver to operate program flash:</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/pflash.uvprojx"/>
        <environment name="iar" load="iar/pflash.ewp"/>
      </project>
      <attributes>
        <category>driver examples/flash/pflash</category>
      </attributes>
    </example>
    <example name="gpio_input_interrupt" folder="driver_examples/gpio/input_interrupt" doc="readme.txt">
      <description>The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/gpio_input_interrupt.uvprojx"/>
        <environment name="iar" load="iar/gpio_input_interrupt.ewp"/>
      </project>
      <attributes>
        <category>driver examples/gpio/input interrupt</category>
      </attributes>
    </example>
    <example name="gpio_led_output" folder="driver_examples/gpio/led_output" doc="readme.txt">
      <description>The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/gpio_led_output.uvprojx"/>
        <environment name="iar" load="iar/gpio_led_output.ewp"/>
      </project>
      <attributes>
        <category>driver examples/gpio/led output</category>
      </attributes>
    </example>
    <example name="i2c_dma_b2b_transfer_master" folder="driver_examples/i2c/dma_b2b_transfer/master" doc="readme.txt">
      <description>The i2c_dma_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with DMA:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/i2c_dma_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/i2c_dma_b2b_transfer_master.ewp"/>
      </project>
      <attributes>
        <category>driver examples/i2c/dma b2b transfer/master</category>
      </attributes>
    </example>
    <example name="i2c_dma_b2b_transfer_slave" folder="driver_examples/i2c/dma_b2b_transfer/slave" doc="readme.txt">
      <description>The i2c_dma_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a DMA master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/i2c_dma_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/i2c_dma_b2b_transfer_slave.ewp"/>
      </project>
      <attributes>
        <category>driver examples/i2c/dma b2b transfer/slave</category>
      </attributes>
    </example>
    <example name="i2c_interrupt" folder="driver_examples/i2c/interrupt" doc="readme.txt">
      <description>The i2c_functional_interrupt example shows how to use I2C functional driver to build a interrupt based application:In this example , one i2c instance used as I2C master and another i2c instance used as I2C slave .1. I2C master send data to I2C slave in interrupt . (I2C Slave using interrupt to receive the data)2. I2C master read data from I2C slave in interrupt . (I2C Slave using interrupt to send the data)3. The example assumes that the connection is OK between master and slave, so there's NO error handling code.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/i2c_interrupt.uvprojx"/>
        <environment name="iar" load="iar/i2c_interrupt.ewp"/>
      </project>
      <attributes>
        <category>driver examples/i2c/interrupt</category>
      </attributes>
    </example>
    <example name="i2c_interrupt_b2b_transfer_master" folder="driver_examples/i2c/interrupt_b2b_transfer/master" doc="readme.txt">
      <description>The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/i2c_interrupt_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/i2c_interrupt_b2b_transfer_master.ewp"/>
      </project>
      <attributes>
        <category>driver examples/i2c/interrupt b2b transfer/master</category>
      </attributes>
    </example>
    <example name="i2c_interrupt_b2b_transfer_slave" folder="driver_examples/i2c/interrupt_b2b_transfer/slave" doc="readme.txt">
      <description>The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/i2c_interrupt_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/i2c_interrupt_b2b_transfer_slave.ewp"/>
      </project>
      <attributes>
        <category>driver examples/i2c/interrupt b2b transfer/slave</category>
      </attributes>
    </example>
    <example name="i2c_polling_b2b_transfer_master" folder="driver_examples/i2c/polling_b2b_transfer/master" doc="readme.txt">
      <description>The i2c_polling_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/i2c_polling_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/i2c_polling_b2b_transfer_master.ewp"/>
      </project>
      <attributes>
        <category>driver examples/i2c/polling b2b transfer/master</category>
      </attributes>
    </example>
    <example name="i2c_polling_b2b_transfer_slave" folder="driver_examples/i2c/polling_b2b_transfer/slave" doc="readme.txt">
      <description>The i2c_polling_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/i2c_polling_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/i2c_polling_b2b_transfer_slave.ewp"/>
      </project>
      <attributes>
        <category>driver examples/i2c/polling b2b transfer/slave</category>
      </attributes>
    </example>
    <example name="i2c_read_accel_value_transfer" folder="driver_examples/i2c/read_accel_value_transfer" doc="readme.txt">
      <description>The i2c_read_accel_value example shows how to use I2C driver to communicate with an i2c device: 1. How to use the i2c driver to read a i2c device who_am_I register. 2. How to use the i2c driver to write/read the device registers.In this example, the values of three-axis accelerometer print to the serial terminal on PC throughthe virtual serial port on board.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/i2c_read_accel_value_transfer.uvprojx"/>
        <environment name="iar" load="iar/i2c_read_accel_value_transfer.ewp"/>
      </project>
      <attributes>
        <category>driver examples/i2c/read accel value transfer</category>
      </attributes>
    </example>
    <example name="lpsci_dma_transfer" folder="driver_examples/lpsci/dma_transfer" doc="readme.txt">
      <description>The lpsci_dma Example project is to demonstrate usage of the KSDK lpsci driver.In the example, you can send characters to the console back and they will be printed out onto consolein a group of 8 characters.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/lpsci_dma_transfer.uvprojx"/>
        <environment name="iar" load="iar/lpsci_dma_transfer.ewp"/>
      </project>
      <attributes>
        <category>driver examples/lpsci/dma transfer</category>
      </attributes>
    </example>
    <example name="lpsci_interrupt" folder="driver_examples/lpsci/interrupt" doc="readme.txt">
      <description>The lpsci_functioncal_interrupt example shows how to use lpsci driver functionalAPI to receive data with interrupt method:In this example, one lpsci instance connect to PC, the board willsend back all characters that PC send to the board.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/lpsci_interrupt.uvprojx"/>
        <environment name="iar" load="iar/lpsci_interrupt.ewp"/>
      </project>
      <attributes>
        <category>driver examples/lpsci/interrupt</category>
      </attributes>
    </example>
    <example name="lpsci_interrupt_rb_transfer" folder="driver_examples/lpsci/interrupt_rb_transfer" doc="readme.txt">
      <description>The lpsci_interrupt_ring_buffer Example project is to demonstrate usage of the KSDK lpsci driver.In the example, you can send characters to the console back and they will be printed out onto consolein a group of 8 characters.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/lpsci_interrupt_rb_transfer.uvprojx"/>
        <environment name="iar" load="iar/lpsci_interrupt_rb_transfer.ewp"/>
      </project>
      <attributes>
        <category>driver examples/lpsci/interrupt rb transfer</category>
      </attributes>
    </example>
    <example name="lpsci_interrupt_transfer" folder="driver_examples/lpsci/interrupt_transfer" doc="readme.txt">
      <description>The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board. Note: two queued transfer in this example, so please input even number characters.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/lpsci_interrupt_transfer.uvprojx"/>
        <environment name="iar" load="iar/lpsci_interrupt_transfer.ewp"/>
      </project>
      <attributes>
        <category>driver examples/lpsci/interrupt transfer</category>
      </attributes>
    </example>
    <example name="lpsci_polling" folder="driver_examples/lpsci/polling" doc="readme.txt">
      <description>The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/lpsci_polling.uvprojx"/>
        <environment name="iar" load="iar/lpsci_polling.ewp"/>
      </project>
      <attributes>
        <category>driver examples/lpsci/polling</category>
      </attributes>
    </example>
    <example name="lptmr" folder="driver_examples/lptmr" doc="readme.txt">
      <description>The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/lptmr.uvprojx"/>
        <environment name="iar" load="iar/lptmr.ewp"/>
      </project>
      <attributes>
        <category>driver examples/lptmr</category>
      </attributes>
    </example>
    <example name="mcg_fee_blpe" folder="driver_examples/mcg/fee_blpe" doc="readme.txt">
      <description>The fee_bple example shows how to use MCG driver to change from FEE mode to BLPE mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to Fee mode from default reset mode    Change from FEE -&gt; FBE -&gt; BLPE    Change back BLPE -&gt; FBE -&gt; FEE    Get System clock in FEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/mcg_fee_blpe.uvprojx"/>
        <environment name="iar" load="iar/mcg_fee_blpe.ewp"/>
      </project>
      <attributes>
        <category>driver examples/mcg/fee blpe</category>
      </attributes>
    </example>
    <example name="mcg_fee_blpi" folder="driver_examples/mcg/fee_blpi" doc="readme.txt">
      <description>The fee_bpli example shows how to use MCG driver to change from FEE mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to FEE mode from default reset mode    Change from FEE -&gt; FBI -&gt; BLPI    Change back BLPI -&gt; FBI -&gt; FEE    Get System clock in FEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/mcg_fee_blpi.uvprojx"/>
        <environment name="iar" load="iar/mcg_fee_blpi.ewp"/>
      </project>
      <attributes>
        <category>driver examples/mcg/fee blpi</category>
      </attributes>
    </example>
    <example name="mcg_fei_blpi" folder="driver_examples/mcg/fei_blpi" doc="readme.txt">
      <description>The fei_bpli example shows how to use MCG driver to change from FEI mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to FEI mode from default reset mode    Change mode FEI -&gt; FBI -&gt; BLPI    Change back BLPE -&gt; FBI -&gt; FEI    Get System clock in FEI mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/mcg_fei_blpi.uvprojx"/>
        <environment name="iar" load="iar/mcg_fei_blpi.ewp"/>
      </project>
      <attributes>
        <category>driver examples/mcg/fei blpi</category>
      </attributes>
    </example>
    <example name="mcg_pee_blpe" folder="driver_examples/mcg/pee_blpe" doc="readme.txt">
      <description>The pee_bple example shows how to use MCG driver to change from PEE mode to BLPE mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to PEE mode from default reset mode    Change mode PEE -&gt; PBE -&gt; BLPE    Change back BLPE -&gt; PBE -&gt; PEE    Get System clock in PEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/mcg_pee_blpe.uvprojx"/>
        <environment name="iar" load="iar/mcg_pee_blpe.ewp"/>
      </project>
      <attributes>
        <category>driver examples/mcg/pee blpe</category>
      </attributes>
    </example>
    <example name="mcg_pee_blpi" folder="driver_examples/mcg/pee_blpi" doc="readme.txt">
      <description>The pee_bpli example shows how to use MCG driver to change from PEE mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to PEE mode from default reset mode    Change mode PEE -&gt; PBE -&gt;FBE -&gt; FBI -&gt; BLPI    Change back BLPI -&gt; FBI -&gt; FBE -&gt; PBE -&gt; PEE    Get System clock in PEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/mcg_pee_blpi.uvprojx"/>
        <environment name="iar" load="iar/mcg_pee_blpi.ewp"/>
      </project>
      <attributes>
        <category>driver examples/mcg/pee blpi</category>
      </attributes>
    </example>
    <example name="pit" folder="driver_examples/pit" doc="readme.txt">
      <description>The PIT project is a simple demonstration program of the SDK PIT driver. It sets up the PIThardware block to trigger a periodic interrupt after every 1 second. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/pit.uvprojx"/>
        <environment name="iar" load="iar/pit.ewp"/>
      </project>
      <attributes>
        <category>driver examples/pit</category>
      </attributes>
    </example>
    <example name="slcd" folder="driver_examples/slcd" doc="readme.txt">
      <description>The SLCD example shows how to use SLCD driver.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/slcd.uvprojx"/>
        <environment name="iar" load="iar/slcd.ewp"/>
      </project>
      <attributes>
        <category>driver examples/slcd</category>
      </attributes>
    </example>
    <example name="spi_dma_b2b_transfer_master" folder="driver_examples/spi/dma_b2b_transfer/master" doc="readme.txt">
      <description>The spi_dma_board2board_master example shows how to use spi driver as master to do board to board transfer with DMA:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/spi_dma_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/spi_dma_b2b_transfer_master.ewp"/>
      </project>
      <attributes>
        <category>driver examples/spi/dma b2b transfer/master</category>
      </attributes>
    </example>
    <example name="spi_dma_b2b_transfer_slave" folder="driver_examples/spi/dma_b2b_transfer/slave" doc="readme.txt">
      <description>The spi_dma_board2board_slave example shows how to use spi driver as slave to do board to board transfer with DMA:In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/spi_dma_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/spi_dma_b2b_transfer_slave.ewp"/>
      </project>
      <attributes>
        <category>driver examples/spi/dma b2b transfer/slave</category>
      </attributes>
    </example>
    <example name="spi_interrupt" folder="driver_examples/spi/interrupt" doc="readme.txt">
      <description>The spi_interrupt example shows how to use spi functional API to do interrupt transfer:In this example, one spi instance as master and another spi instance as slave. Master sends a piece of data to slave,and check if the data slave received is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/spi_interrupt.uvprojx"/>
        <environment name="iar" load="iar/spi_interrupt.ewp"/>
      </project>
      <attributes>
        <category>driver examples/spi/interrupt</category>
      </attributes>
    </example>
    <example name="spi_interrupt_b2b_master" folder="driver_examples/spi/interrupt_b2b/master" doc="readme.txt">
      <description>The spi_interrupt_b2b_master example shows how to use spi functional API to do interrupt transfer as a master:In this example, the spi instance as master. Master sends a piece of data to slave, receive data from slave,and checkif the data master received is correct. This example needs to work with spi_interrupt_b2b_slave example.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/spi_interrupt_b2b_master.uvprojx"/>
        <environment name="iar" load="iar/spi_interrupt_b2b_master.ewp"/>
      </project>
      <attributes>
        <category>driver examples/spi/interrupt b2b/master</category>
      </attributes>
    </example>
    <example name="spi_interrupt_b2b_slave" folder="driver_examples/spi/interrupt_b2b/slave" doc="readme.txt">
      <description>The spi_interrupt_b2b_slave example shows how to use spi functional API to do interrupt transfer as a slave:In this example, the spi instance as slave. Slave receives data froma master and send a peiece of data to master,and check if the data slave received is correct. This example needs to work with spi_interrupt_b2b_master example.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/spi_interrupt_b2b_slave.uvprojx"/>
        <environment name="iar" load="iar/spi_interrupt_b2b_slave.ewp"/>
      </project>
      <attributes>
        <category>driver examples/spi/interrupt b2b/slave</category>
      </attributes>
    </example>
    <example name="spi_interrupt_b2b_transfer_master" folder="driver_examples/spi/interrupt_b2b_transfer/master" doc="readme.txt">
      <description>The spi_interrupt_board2board_master example shows how to use spi driver as master to do board to board transfer withinterrupt:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/spi_interrupt_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/spi_interrupt_b2b_transfer_master.ewp"/>
      </project>
      <attributes>
        <category>driver examples/spi/interrupt b2b transfer/master</category>
      </attributes>
    </example>
    <example name="spi_interrupt_b2b_transfer_slave" folder="driver_examples/spi/interrupt_b2b_transfer/slave" doc="readme.txt">
      <description>The spi_interrupt_board2board_slave example shows how to use spi driver as slave to do board to board transfer with interrupt:In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/spi_interrupt_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/spi_interrupt_b2b_transfer_slave.ewp"/>
      </project>
      <attributes>
        <category>driver examples/spi/interrupt b2b transfer/slave</category>
      </attributes>
    </example>
    <example name="spi_polling_b2b_transfer_master" folder="driver_examples/spi/polling_b2b_transfer/master" doc="readme.txt">
      <description>The spi_polling_board2board_master example shows how to use spi driver as master to do board to board transfer with polling:In this example, one spi instance as master and another spi instance on othereboard as slave. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/spi_polling_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/spi_polling_b2b_transfer_master.ewp"/>
      </project>
      <attributes>
        <category>driver examples/spi/polling b2b transfer/master</category>
      </attributes>
    </example>
    <example name="spi_polling_b2b_transfer_slave" folder="driver_examples/spi/polling_b2b_transfer/slave" doc="readme.txt">
      <description>The spi_polling_board2board_slave example shows how to use spi driver as slave to do board to board transfer withpolling:Notice: The SPI slave of this example uses interrupt mode, as there is no polling mode for SPI slave.In this example, one spi instance as slave and another spi instance on other board as master. Master sends a piece ofdata to slave, and receive a piece of data from slave. This example checks if the data received from master is correct.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/spi_polling_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/spi_polling_b2b_transfer_slave.ewp"/>
      </project>
      <attributes>
        <category>driver examples/spi/polling b2b transfer/slave</category>
      </attributes>
    </example>
    <example name="tpm_input_capture" folder="driver_examples/tpm/input_capture" doc="readme.txt">
      <description>The TPM project is a demonstration program of the SDK TPM driver's input capture feature.The example sets up a TPM channel for dual-edge capture. Once the input signal is received,this example will print the capture value.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/tpm_input_capture.uvprojx"/>
        <environment name="iar" load="iar/tpm_input_capture.ewp"/>
      </project>
      <attributes>
        <category>driver examples/tpm/input capture</category>
      </attributes>
    </example>
    <example name="tpm_output_compare" folder="driver_examples/tpm/output_compare" doc="readme.txt">
      <description>The TPM project is a demonstration program of the SDK TPM driver's output compare feature.It sets up one TPM channel to toggle the output when a match occurs with the channel value. The usershould probe the TPM output with a oscilloscope to see the signal toggling.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/tpm_output_compare.uvprojx"/>
        <environment name="iar" load="iar/tpm_output_compare.ewp"/>
      </project>
      <attributes>
        <category>driver examples/tpm/output compare</category>
      </attributes>
    </example>
    <example name="tpm_pwm_twochannel" folder="driver_examples/tpm/pwm_twochannel" doc="readme.txt">
      <description>The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output PWM signals on two TPM channels. The PWM dutycycle on both channelsis manually updated. On boards that have an LED connected to the TPM pins, the user will seea change in LED brightness if user enter different values.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/tpm_pwm_twochannel.uvprojx"/>
        <environment name="iar" load="iar/tpm_pwm_twochannel.ewp"/>
      </project>
      <attributes>
        <category>driver examples/tpm/pwm twochannel</category>
      </attributes>
    </example>
    <example name="tpm_simple_pwm" folder="driver_examples/tpm/simple_pwm" doc="readme.txt">
      <description>The TPM project is a simple demonstration program of the SDK TPM driver. It sets up the TPMhardware block to output a center-aligned PWM signal. The PWM dutycycle is manually updated.On boards that have an LED connected to the TPM pins, the user will see a change in LEDbrightness if user enter different values.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/tpm_simple_pwm.uvprojx"/>
        <environment name="iar" load="iar/tpm_simple_pwm.ewp"/>
      </project>
      <attributes>
        <category>driver examples/tpm/simple pwm</category>
      </attributes>
    </example>
    <example name="tpm_timer" folder="driver_examples/tpm/timer" doc="readme.txt">
      <description>The TPM project is a simple demonstration program of the SDK TPM driver to use TPM as a timer.It sets up the TPM hardware block to trigger an interrupt every 1 millisecond.When the TPM interrupt is triggered a message a printed on the UART terminal.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/tpm_timer.uvprojx"/>
        <environment name="iar" load="iar/tpm_timer.ewp"/>
      </project>
      <attributes>
        <category>driver examples/tpm/timer</category>
      </attributes>
    </example>
    <example name="tsi_v4_low_power_mode" folder="driver_examples/tsi_v4/low_power" doc="readme.txt">
      <description>The tsi_v4_low_power example shows how to use TSI_V4 driver in low power modes:In this example , we make use of the available electrodes on board to show driver usage.1. Firstly, we get the non-touch calibration results as baseline electrode counter;2. Then, we start the Hardware-Trigger scan using interrupt method to wakeup from low power   modes through pad touch;3. Note: you can select which low power mode you want to enter into.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/tsi_v4_low_power_mode.uvprojx"/>
        <environment name="iar" load="iar/tsi_v4_low_power_mode.ewp"/>
      </project>
      <attributes>
        <category>driver examples/tsi v4/low power</category>
      </attributes>
    </example>
    <example name="tsi_v4_normal_mode" folder="driver_examples/tsi_v4/normal" doc="readme.txt">
      <description>The tsi_v4_normal example shows how to use TSI_V4 driver in normal modes:In this example , we make use of the available electrodes on board to show driver usage.1. Firstly, we get the non-touch calibration results as baseline electrode counter;2. Then, we start the Software-Trigger scan using polling method and interrupt method;3. Then, we start the Hardware-Trigger scan using interrupt method.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/tsi_v4_normal_mode.uvprojx"/>
        <environment name="iar" load="iar/tsi_v4_normal_mode.ewp"/>
      </project>
      <attributes>
        <category>driver examples/tsi v4/normal</category>
      </attributes>
    </example>
    <example name="uart_dma_transfer" folder="driver_examples/uart/dma_transfer" doc="readme.txt">
      <description>The uart_dma example shows how to use uart driver with DMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/uart_dma_transfer.uvprojx"/>
        <environment name="iar" load="iar/uart_dma_transfer.ewp"/>
      </project>
      <attributes>
        <category>driver examples/uart/dma transfer</category>
      </attributes>
    </example>
    <example name="uart_interrupt" folder="driver_examples/uart/interrupt" doc="readme.txt">
      <description>The uart_functioncal_interrupt example shows how to use uart driver functionalAPI to receive data with interrupt method:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/uart_interrupt.uvprojx"/>
        <environment name="iar" load="iar/uart_interrupt.ewp"/>
      </project>
      <attributes>
        <category>driver examples/uart/interrupt</category>
      </attributes>
    </example>
    <example name="uart_interrupt_rb_transfer" folder="driver_examples/uart/interrupt_rb_transfer" doc="readme.txt">
      <description>The uart_interrupt_ring_buffer example shows how to use uart driver in interrupt way withRX ring buffer enabled:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/uart_interrupt_rb_transfer.uvprojx"/>
        <environment name="iar" load="iar/uart_interrupt_rb_transfer.ewp"/>
      </project>
      <attributes>
        <category>driver examples/uart/interrupt rb transfer</category>
      </attributes>
    </example>
    <example name="uart_interrupt_transfer" folder="driver_examples/uart/interrupt_transfer" doc="readme.txt">
      <description>The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/uart_interrupt_transfer.uvprojx"/>
        <environment name="iar" load="iar/uart_interrupt_transfer.ewp"/>
      </project>
      <attributes>
        <category>driver examples/uart/interrupt transfer</category>
      </attributes>
    </example>
    <example name="uart_polling" folder="driver_examples/uart/polling" doc="readme.txt">
      <description>The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board.</description>
      <board Dvendor="NXP:11" name="FRDM-KL46Z" vendor="NXP"/>
      <project>
        <environment name="uv" load="mdk/uart_polling.uvprojx"/>
        <environment name="iar" load="iar/uart_polling.ewp"/>
      </project>
      <attributes>
        <category>driver examples/uart/polling</category>
      </attributes>
    </example>
  </examples>
  <components>
    <component Cclass="Board Support" Cgroup="SDK Project Template" Csub="project_template" Cversion="1.0.0" Cvariant="frdmkl46z" condition="project_template.frdmkl46z">
      <description></description>
      <files>
        <file name="project_template/board.c" category="sourceC" attr="config"/>
        <file name="project_template/board.h" category="header" attr="config"/>
        <file name="project_template/clock_config.c" category="sourceC" attr="config"/>
        <file name="project_template/clock_config.h" category="header" attr="config"/>
        <file name="project_template/peripherals.c" category="sourceC" attr="config"/>
        <file name="project_template/peripherals.h" category="header" attr="config"/>
        <file name="project_template/pin_mux.c" category="sourceC" attr="config"/>
        <file name="project_template/pin_mux.h" category="header" attr="config"/>
      </files>
    </component>
  </components>
</package>
