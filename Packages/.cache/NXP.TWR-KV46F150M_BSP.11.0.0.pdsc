<?xml version="1.0" encoding="UTF-8"?>
<package xmlns:xs="http://www.w3.org/2001/XMLSchema-instance" xs:noNamespaceSchemaLocation="PACK.xsd" schemaVersion="1.4">
  <name>TWR-KV46F150M_BSP</name>
  <vendor>NXP</vendor>
  <description>Board Support Pack for TWRKV46F150M</description>
  <url>http://mcuxpresso.nxp.com/cmsis_pack/repo/</url>
  <license>Licenses.txt</license>
  <releases>
    <release version="11.0.0">NXP CMSIS packs based on MCUXpresso SDK 2.5.0</release>
    <release version="10.0.3">A problem with missing components from some example the projects were dependent on was fixed (KEX-4241); Incorrect path to linked libraries were fixed: a pack version was a static part of the path and hadnâ€™t worked for pack versions other than v10.0.0 (KEX-4373); A problem with incorrectly defined XIP_BOOT_HEADER_ENABLE, XIP_BOOT_HEADER_DCD_ENABLE and XIP_EXTERNAL_FLASH preprocessor symbols was fixed (KEX-4553); Missing flash algorithms for MK27, MK28, LPC802 and LPC804 device family packs were added (KEX-4659).</release>
    <release version="10.0.2">NXP CMSIS packs based on MCUXpresso SDK 2.4.0</release>
    <release version="10.0.1">NXP CMSIS packs based on MCUXpresso SDK 2.3.1</release>
    <release version="10.0.0">NXP CMSIS packs with updated Clear BSD license, based on MCUXpresso SDK 2.3.0. NXP CMSIS pack will maintain independent versioning starting with 10.0.0</release>
    <release version="2.3.0">NXP MCUXpresso SDK 2.3.0 CMSIS packs with updated Clear BSD license</release>
  </releases>
  <keywords>
    <keyword>Board Support Pack</keyword>
  </keywords>
  <boards>
    <board vendor="NXP" name="TWR-KV46F150M">
      <description>TWR-KV46F150M: Kinetis KV4x Family Tower System Module</description>
      <mountedDevice Dname="MKV46F256xxx16" Dvendor="NXP:11"/>
    </board>
  </boards>
  <conditions>
    <condition id="device.MKV46F16_AND_component.serial_manager_uart_AND_component.uart_adapter_AND_device.MKV46F16_startup_AND_driver.clock_AND_driver.common_AND_driver.gpio_AND_driver.port_AND_driver.smc_AND_driver.uart_AND_driver.xbara_AND_utility.debug_console">
      <accept Dname="MKV46F128???16" Dvendor="NXP:11"/>
      <accept Dname="MKV46F256???16" Dvendor="NXP:11"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="uart"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="uart_adapter"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="port"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="common"/>
      <require Cclass="Device" Cgroup="SDK Utilities" Csub="debug_console"/>
      <require Cclass="Device" Cgroup="SDK Utilities" Csub="serial_manager_uart"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="gpio"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="smc"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="clock"/>
      <require Cclass="Device" Cgroup="Startup" Csub="MKV46F16_startup"/>
      <require Cclass="Device" Cgroup="SDK Drivers" Csub="xbara"/>
    </condition>
  </conditions>
  <examples>
    <example name="hello_world" folder="demo_apps/hello_world" doc="readme.txt">
      <description>The Hello World demo application provides a sanity check for the new SDK build environments and board bring up. The HelloWorld demo prints the "Hello World" string to the terminal using the SDK UART drivers. The purpose of this demo is toshow how to use the UART, and to provide a simple project for debugging and further development.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/hello_world.uvprojx"/>
        <environment name="iar" load="iar/hello_world.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ftm_pwm_twochannel" folder="driver_examples/ftm/pwm_twochannel" doc="readme.txt">
      <description>The FTM pwm two channel Example project is a demonstration program that uses the KSDK software to generate a square pulse PWM on 2 channel to control the LED brightness.- FTM generates a PWM with the increasing and decreasing duty cycle.- LED brightness is increasing and then dimming. This is a continuous process.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ftm_pwm_twochannel.uvprojx"/>
        <environment name="iar" load="iar/ftm_pwm_twochannel.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ftm_simple_pwm" folder="driver_examples/ftm/simple_pwm" doc="readme.txt">
      <description>The FTM project is a simple demonstration program of the SDK FTM driver. It sets up the FTMhardware block to output a center-aligned PWM signal. The PWM dutycycle is periodically updated.On boards that have an LED connected to the FTM pins, the user will see a change in LED brightness.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ftm_simple_pwm.uvprojx"/>
        <environment name="iar" load="iar/ftm_simple_pwm.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ftm_timer" folder="driver_examples/ftm/timer" doc="readme.txt">
      <description>The FTM project is a simple demonstration program of the SDK FTM driver to use FTM as a timer.It sets up the FTM hardware block to trigger an interrupt every 1 millisecond.When the FTM interrupt is triggered a message a printed on the UART terminal.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ftm_timer.uvprojx"/>
        <environment name="iar" load="iar/ftm_timer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ftm_combine_pwm" folder="driver_examples/ftm/combine_pwm" doc="readme.txt">
      <description>The FTM project is a demonstration program of generating a combined PWM signal by the SDK FTM driver. It sets up the FTMhardware block to output PWM signals on two TPM channels. The example also shows the complementary mode of operationand deadtime insertion.On boards that have 2 LEDs connected to the FTM pins, the user will see a change in LED brightness.And if the board do not support LEDs to show, the outputs can be observed by oscilloscope.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ftm_combine_pwm.uvprojx"/>
        <environment name="iar" load="iar/ftm_combine_pwm.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ftm_output_compare" folder="driver_examples/ftm/output_compare" doc="readme.txt">
      <description>The FTM project is a demonstration program of the SDK FTM driver's output compare feature.It sets up one FTM channel to toggle the output when a match occurs with the channel value. The usershould probe the FTM output with a oscilloscope to see the signal toggling.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ftm_output_compare.uvprojx"/>
        <environment name="iar" load="iar/ftm_output_compare.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ftm_dual_edge_capture" folder="driver_examples/ftm/dual_edge_capture" doc="readme.txt">
      <description>The FTM project is a demonstration program of the SDK FTM driver's dual-edge capture feature.This feature is available only on certain SoC's.The example sets up a FTM channel-pair for dual-edge capture. Once the input signal is received,this example will print the capture values and period of the input signal on the terminal window.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ftm_dual_edge_capture.uvprojx"/>
        <environment name="iar" load="iar/ftm_dual_edge_capture.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ftm_input_capture" folder="driver_examples/ftm/input_capture" doc="readme.txt">
      <description>The FTM project is a demonstration program of the SDK FTM driver's input capture feature.The example sets up a FTM channel for dual-edge capture. Once the input signal is received,this example will print the capture value.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ftm_input_capture.uvprojx"/>
        <environment name="iar" load="iar/ftm_input_capture.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="mcg_pee_blpi" folder="driver_examples/mcg/pee_blpi" doc="readme.txt">
      <description>The pee_bpli example shows how to use MCG driver to change from PEE mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to PEE mode from default reset mode    Change mode PEE -&gt; PBE -&gt;FBE -&gt; FBI -&gt; BLPI    Change back BLPI -&gt; FBI -&gt; FBE -&gt; PBE -&gt; PEE    Get System clock in PEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/mcg_pee_blpi.uvprojx"/>
        <environment name="iar" load="iar/mcg_pee_blpi.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="mcg_fee_blpi" folder="driver_examples/mcg/fee_blpi" doc="readme.txt">
      <description>The fee_bpli example shows how to use MCG driver to change from FEE mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to FEE mode from default reset mode    Change from FEE -&gt; FBI -&gt; BLPI    Change back BLPI -&gt; FBI -&gt; FEE    Get System clock in FEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/mcg_fee_blpi.uvprojx"/>
        <environment name="iar" load="iar/mcg_fee_blpi.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="mcg_fei_blpi" folder="driver_examples/mcg/fei_blpi" doc="readme.txt">
      <description>The fei_bpli example shows how to use MCG driver to change from FEI mode to BLPI mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to FEI mode from default reset mode    Change mode FEI -&gt; FBI -&gt; BLPI    Change back BLPE -&gt; FBI -&gt; FEI    Get System clock in FEI mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/mcg_fei_blpi.uvprojx"/>
        <environment name="iar" load="iar/mcg_fei_blpi.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="mcg_pee_blpe" folder="driver_examples/mcg/pee_blpe" doc="readme.txt">
      <description>The pee_bple example shows how to use MCG driver to change from PEE mode to BLPE mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to PEE mode from default reset mode    Change mode PEE -&gt; PBE -&gt; BLPE    Change back BLPE -&gt; PBE -&gt; PEE    Get System clock in PEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/mcg_pee_blpe.uvprojx"/>
        <environment name="iar" load="iar/mcg_pee_blpe.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="mcg_fee_blpe" folder="driver_examples/mcg/fee_blpe" doc="readme.txt">
      <description>The fee_bple example shows how to use MCG driver to change from FEE mode to BLPE mode: 1. How to use the mode functions for MCG mode switch. 2. How to use the frequency functions to get current MCG frequency. 3. Work flow    Boot to Fee mode from default reset mode    Change from FEE -&gt; FBE -&gt; BLPE    Change back BLPE -&gt; FBE -&gt; FEE    Get System clock in FEE mode to blink LEDIn this example, because the debug console's clock frequency may change,so the example running information is not output from debug console. Here theLED blinks to show that the example finished successfully.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/mcg_fee_blpe.uvprojx"/>
        <environment name="iar" load="iar/mcg_fee_blpe.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="pwm" folder="driver_examples/pwm" doc="readme.txt">
      <description>The PWM project is a simple demonstration program of the SDK PWM driver.The pulse width modulator (PWM) module contains PWM submodules, each of which is set up to control a single half-bridge power stage.Fault channel support is provided. This PWM module can generate various switching patterns, including highly sophisticated waveforms.It can be used to control all known Switched Mode Power Supplies (SMPS) topologies.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/pwm.uvprojx"/>
        <environment name="iar" load="iar/pwm.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="pwm_fault" folder="demo_apps/pwm_fault" doc="readme.txt">
      <description>This demo application demonstrates the EflexPWM fault demo.This application demonstrates the pulse with modulation function of EflexPWM module. It outputs thePWM to control the intensity of the LED. PWM shut down when a fault signal is detected on the CMPoutput. One input of CMP, other input is from internal DAC.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/pwm_fault.uvprojx"/>
        <environment name="iar" load="iar/pwm_fault.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="xbara" folder="driver_examples/xbara" doc="readme.txt">
      <description>The Xbara project is a simple demonstration program of the SDK Xbara driver.The intended applicationof this module is to provide a flexible crossbar switch function that allows any input to beconnected to any output under user control.It sets up the Xbara hardware block to trigger a periodicinterrupt after every 1 second. When the Xbar interrupt is triggered a message a printed on the UARTterminal.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/xbara.uvprojx"/>
        <environment name="iar" load="iar/xbara.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="gpio_input_interrupt" folder="driver_examples/gpio/input_interrupt" doc="readme.txt">
      <description>The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example uses the software button to control/toggle the LED.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/gpio_input_interrupt.uvprojx"/>
        <environment name="iar" load="iar/gpio_input_interrupt.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="gpio_led_output" folder="driver_examples/gpio/led_output" doc="readme.txt">
      <description>The GPIO Example project is a demonstration program that uses the KSDK software to manipulate the general-purposeoutputs.The example is supported by the set, clear, and toggle write-only registers for each port output data register. The example take turns to shine the LED.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/gpio_led_output.uvprojx"/>
        <environment name="iar" load="iar/gpio_led_output.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="lptmr" folder="driver_examples/lptmr" doc="readme.txt">
      <description>The LPTMR project is a simple demonstration program of the SDK LPTMR driver. It sets up the LPTMRhardware block to trigger a periodic interrupt after every 1 second. When the LPTMR interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/lptmr.uvprojx"/>
        <environment name="iar" load="iar/lptmr.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="pit" folder="driver_examples/pit" doc="readme.txt">
      <description>The PIT project is a simple demonstration program of the SDK PIT driver. It sets up the PIThardware block to trigger a periodic interrupt after every 1 second. When the PIT interrupt is triggereda message a printed on the UART terminal and an LED is toggled on the board.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/pit.uvprojx"/>
        <environment name="iar" load="iar/pit.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ewm" folder="driver_examples/ewm" doc="readme.txt">
      <description>The EWM Example project is to demonstrate usage of the KSDK EWM driver.In the example, EWM counter is continuously refreshed until button is pressed.Once the button is pressed, EWM counter will expire and interrupt will be generated.After the first pressing, another interrupt can be triggered by pressing button again.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ewm.uvprojx"/>
        <environment name="iar" load="iar/ewm.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="wdog" folder="driver_examples/wdog" doc="readme.txt">
      <description>The WDOG Example project is to demonstrate usage of the KSDK wdog driver.In this example,quick test is first implemented to test the wdog.And then after 10 times of refreshing the watchdog in None-window mode, a timeout reset is generated.We also try to refresh out of window to trigger reset after 10 times of refreshing in Window mode.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/wdog.uvprojx"/>
        <environment name="iar" load="iar/wdog.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="crc" folder="driver_examples/crc" doc="readme.txt">
      <description>The CRC Example project is a demonstration program that uses the KSDK software to generate checksumsfor an ASCII string. Several CRC protocols are implemented using the CRC driver API.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/crc.uvprojx"/>
        <environment name="iar" load="iar/crc.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cadc_dual_parallel_conversion" folder="driver_examples/cadc/dual_parallel_conversion" doc="readme.txt">
      <description>The cadc_dual_parallel_conversion example shows how to use the both converter parallel at the same time with CADC driver.In this example, the CADC is configured as "kCADC_DualConverterWorkAsTriggeredParallel" (default) work mode. User shouldindicate 4 channel pairs to provide the differential voltage signal (can be controlled by user) as the inputs for CADCsample slots. These sample slots would be assembled into the two conversion sequence for each converter. In "kCADC_DualConverterWorkAsTriggeredParallel" mode, the converter A converts sample 0 and sample 1 (sample 0-7 areavailable) and the converter B converts sample 8 and sample 9 (sample 8-15 are available). As the "simultaneous mode" isenabled by default, the converter A's control logic can operate both the two converters, to start and stop together.When running the project, typing any key into debug console would trigger the conversion. And then, the conversion result data of the four sample slots (Sample 0, 1, 8, 9) would be displayed in the terminal. </description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cadc_dual_parallel_conversion.uvprojx"/>
        <environment name="iar" load="iar/cadc_dual_parallel_conversion.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cadc_sequential_conversion" folder="driver_examples/cadc/sequential_conversion" doc="readme.txt">
      <description>The cadc_sequential_conversion example shows how to use a long conversion sequence (can include as many as all the 16 sample slots) with CADC driver.In this example, the CADC is configured as "kCADC_DualConverterWorkAsTriggeredSequential" work mode. User should indicate 4 channel pairs to provide the differential voltage signal (can be controlled by user) as the inputs for CADCsample slots. These sample slots would be assembled into a long conversion sequence.In "kCADC_DualConverterWorkAsTriggeredSequential" mode, all the sample slots are organized as a long conversion sequence. The converter A's control logic would be used to operate this long conversion sequence. It can start and stopthe sequence.When running the project, typing any key into debug console would trigger the conversion. And then, the conversion result data of the four sample slots (Sample 0, 1, 2, 3) would be displayed in the terminal. </description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cadc_sequential_conversion.uvprojx"/>
        <environment name="iar" load="iar/cadc_sequential_conversion.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cadc_dual_seperate_conversion" folder="driver_examples/cadc/dual_seperate_conversion" doc="readme.txt">
      <description>The cadc_dual_seperate_conversion example shows how to use each converter separately with CADC driver.In this example, the CADC is configured as "kCADC_DualConverterWorkAsTriggeredParallel" work mode. User should indicate4 channel pairs to provide the differential voltage signal (can be controlled by user) as the inputs for CADC sample slots. These sample slots would be assembled into the two short conversion sequences (can include 8 sample slots as most). Also the "simultaneous mode" is disabled, so that each converter can be operated by their own control logic separately.When running the project, typing any key into debug console would trigger the conversion. And then, the conversion result data of the converter A's sample slots (Sample 0, 1) would be displayed in the terminal. Type the keyboard againto trigger the converter B, the conversion result data of the converter B's two sample slots (Sample 8, 9) would be displayed.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cadc_dual_seperate_conversion.uvprojx"/>
        <environment name="iar" load="iar/cadc_dual_seperate_conversion.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cadc_continuous_edma_conversion" folder="driver_examples/cadc/continuous_edma_conversion" doc="readme.txt">
      <description>The CADC continuous EDMA demo application demonstrates the usage of the ADC and EDMA peripheral while in a Loop Sequential mode. TheCADC is first set to Loop Sequential mode. In Loop Sequential convert configuration, only the initial rising-edge to launch continuous conversions isobserved, and until conversion is aborted, the CADC continues to do conversions on the same CLIST register that initiated the conversion. EDMA request will be asserted during an CADC conversion READY event noted when any of the ADC_RDY[RDYn] flags is asserted. EDMA will transferCADC results to memory and if users press any key, demo will average CADC results stored in memory and print average on the terminal.  </description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cadc_continuous_edma_conversion.uvprojx"/>
        <environment name="iar" load="iar/cadc_continuous_edma_conversion.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dspi_polling_b2b_transfer_master" folder="driver_examples/dspi/polling_b2b_transfer/master" doc="readme.txt">
      <description>The dspi_polling_b2b_transfer example shows how to use DSPI driver in polling way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_polling_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in polling . (DSPI Slave using interrupt to receive/send the data)</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dspi_polling_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/dspi_polling_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dspi_polling_b2b_transfer_slave" folder="driver_examples/dspi/polling_b2b_transfer/slave" doc="readme.txt">
      <description>The dspi_polling_b2b_transfer example shows how to use DSPI driver in polling way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_polling_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in polling . (DSPI Slave using interrupt to receive/send the data)</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dspi_polling_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/dspi_polling_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dspi_interrupt_b2b_transfer_master" folder="driver_examples/dspi/interrupt_b2b_transfer/master" doc="readme.txt">
      <description>The dspi_interrupt_b2b_transfer example shows how to use DSPI driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_transfer_master.c' includes the DSPI master code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dspi_interrupt_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/dspi_interrupt_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dspi_interrupt_b2b_transfer_slave" folder="driver_examples/dspi/interrupt_b2b_transfer/slave" doc="readme.txt">
      <description>The dspi_interrupt_b2b_transfer example shows how to use DSPI driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_transfer_slave.c' includes the DSPI slave code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dspi_interrupt_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/dspi_interrupt_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dspi_interrupt_b2b_master" folder="driver_examples/dspi/interrupt_b2b/master" doc="readme.txt">
      <description>The dspi_interrupt_b2b example shows how to use DSPI driver in interrupt way:In this example , we need two boards , one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_master.c' includes the DSPI master code.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dspi_interrupt_b2b_master.uvprojx"/>
        <environment name="iar" load="iar/dspi_interrupt_b2b_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dspi_interrupt_b2b_slave" folder="driver_examples/dspi/interrupt_b2b/slave" doc="readme.txt">
      <description>The dspi_interrupt_b2b example shows how to use DSPI driver in interrupt way:In this example , we need two boards , one board used as DSPI master and another board used as DSPI slave.The file 'dspi_interrupt_b2b_slave.c' includes the DSPI slave code.This example does not use the transactional API in DSPI driver. It's a demonstration that how to use the interrupt in KSDK driver.1. DSPI master send/received data to/from DSPI slave in interrupt . (DSPI Slave using interrupt to receive/send the data)</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dspi_interrupt_b2b_slave.uvprojx"/>
        <environment name="iar" load="iar/dspi_interrupt_b2b_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dspi_edma_b2b_transfer_master" folder="driver_examples/dspi/edma_b2b_transfer/master" doc="readme.txt">
      <description>The dspi_edma_b2b_transfer example shows how to use DSPI driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in edma . (DSPI Slave using edma to receive/send the data)</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dspi_edma_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/dspi_edma_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dspi_edma_b2b_transfer_slave" folder="driver_examples/dspi/edma_b2b_transfer/slave" doc="readme.txt">
      <description>The dspi_edma_b2b_transfer example shows how to use DSPI driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in edma . (DSPI Slave using edma to receive/send the data)</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dspi_edma_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/dspi_edma_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="uart_interrupt_transfer" folder="driver_examples/uart/interrupt_transfer" doc="readme.txt">
      <description>The uart_interrupt example shows how to use uart driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/uart_interrupt_transfer.uvprojx"/>
        <environment name="iar" load="iar/uart_interrupt_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="uart_polling" folder="driver_examples/uart/polling" doc="readme.txt">
      <description>The uart_polling example shows how to use uart driver in polling way:In this example, one uart instance connect to PC through uart, the board will send back all characters that PCsend to the board.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/uart_polling.uvprojx"/>
        <environment name="iar" load="iar/uart_polling.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="uart_interrupt" folder="driver_examples/uart/interrupt" doc="readme.txt">
      <description>The uart_functioncal_interrupt example shows how to use uart driver functionalAPI to receive data with interrupt method:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/uart_interrupt.uvprojx"/>
        <environment name="iar" load="iar/uart_interrupt.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="uart_interrupt_rb_transfer" folder="driver_examples/uart/interrupt_rb_transfer" doc="readme.txt">
      <description>The uart_interrupt_ring_buffer example shows how to use uart driver in interrupt way withRX ring buffer enabled:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/uart_interrupt_rb_transfer.uvprojx"/>
        <environment name="iar" load="iar/uart_interrupt_rb_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="uart_edma_transfer" folder="driver_examples/uart/edma_transfer" doc="readme.txt">
      <description>The uart_edma example shows how to use uart driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/uart_edma_transfer.uvprojx"/>
        <environment name="iar" load="iar/uart_edma_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="power_manager" folder="demo_apps/power_manager" doc="readme.txt">
      <description>The Power manager demo application demonstrates the use of power modes in the KSDK. The demo use the notification mechanismand prints the power mode menu through the debug console, where the user can set the MCU to a specific power mode. The usercan also set the wakeup source by following the debug console prompts. The purpose of this demo is to demonstrate theimplementation of a power mode manager. The callback can be registered to the framework. If a power mode transition happens,the callback will be called and user can do something. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/power_manager.uvprojx"/>
        <environment name="iar" load="iar/power_manager.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="power_mode_switch" folder="demo_apps/power_mode_switch" doc="readme.txt">
      <description>The Power mode switch demo application demonstrates the use of power modes in the KSDK. The demo prints the power mode menuthrough the debug console, where the user can set the MCU to a specific power mode. The user can also set the wakeupsource by following the debug console prompts. The purpose of this demo is to show how to switch between different power modes, and how to configure a wakeup source and wakeup the MCU from low power modes. Tips: This demo is to show how the various power mode can switch to each other. However, in actual low power use case, to save energy and reduce the consumption even more, many things can be done including: - Disable the clock for unnecessary module during low power mode. That means, programmer can disable the clocks before entering the low power mode and re-enable them after exiting the low power mode when necessary. - Disable the function for unnecessary part of a module when other part would keep working in low power mode. At the most time, more powerful function means more power consumption. For example, disable the digital function for the unnecessary pin mux, and so on. - Set the proper pin state (direction and logic level) according to the actual application hardware. Otherwise, the pin cirrent would be activied unexpectedly waste some energy. - Other low power consideration based on the actual application hardware. - Debug pins(e.g SWD_DIO) would consume addtional power, had better to disable related pins or disconnect them. </description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/power_mode_switch.uvprojx"/>
        <environment name="iar" load="iar/power_mode_switch.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmp_polling" folder="driver_examples/cmp/polling" doc="readme.txt">
      <description>The CMP polling Example shows the simplest way to use CMP driver and help user with a quick start.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user's voltage crosses the internal DAC's value. The endless loop in main() functionwould detect the logic value of comparator's output, and change the LED. The LED would be turned on when the compareoutput is logic one, or turned off when zero.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmp_polling.uvprojx"/>
        <environment name="iar" load="iar/cmp_polling.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmp_interrupt" folder="driver_examples/cmp/interrupt" doc="readme.txt">
      <description>The CMP interrupt Example shows how to use interrupt with CMP driver.In this example, user should indicate an input channel to capture a voltage signal (can be controlled by user) as the CMP's positive channel input. On the negative side, the internal 6-bit DAC is used to generate the fixed voltage abouthalf value of reference voltage.When running the project, change the input voltage of user-defined channel, then the comparator's output would changebetween logic one and zero when the user-defined channel's voltage crosses the internal DAC's value. The change ofcomparator's output would generate the falling and rising edge events with their interrupts enabled. When any CMP interrupt happens, the CMP's ISR would turn on the LED light if detecting the output's rising edge, or turn off it whendetecting the output's falling edge.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmp_interrupt.uvprojx"/>
        <environment name="iar" load="iar/cmp_interrupt.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dac_basic" folder="driver_examples/dac/basic" doc="readme.txt">
      <description>The dac_basic example shows how to use DAC module simply as the general DAC converter.When the DAC's buffer feature is not enabled, the first item of the buffer is used as the DAC output data register.The converter would always output the value of the first item. In this example, it gets the value from terminal,outputs the DAC output voltage through DAC output pin.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dac_basic.uvprojx"/>
        <environment name="iar" load="iar/dac_basic.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dac_buffer_interrupt" folder="driver_examples/dac/buffer_interrupt" doc="readme.txt">
      <description>The dac_buffer_interrupt example shows how to use DAC buffer with interrupts.When the DAC's buffer feature is enabled, user can benefit from the automation of updating DAC output by hardware/software trigger. As we know, the DAC converter outputs the value of item pointed by current read pointer. Once the buffer is triggered by software or hardware, the buffer's read pointer would move automatically as the work mode is set,like normal (cycle) mode, swing mode, one-time-scan mode or FIFO mode.In this example, it captures the user's type-in operation from terminal and does the software trigger to the buffer.The terminal would also display the log that shows the current buffer pointer's position with buffer events.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dac_buffer_interrupt.uvprojx"/>
        <environment name="iar" load="iar/dac_buffer_interrupt.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dac_continuous_pdb_edma" folder="driver_examples/dac/continuous_pdb_edma" doc="readme.txt">
      <description>The demo shows how to use the PDB to generate a DAC trigger and use the DMA to transfer data into DAC buffer.In this example, DAC is first set to normal buffer mode. PDB is as DAC hardware trigger source and DMA would work when DAC read pointer is zero. When run the example, the DAC is triggered by PDB and the read pointer increases by one,every time the trigger occurs. When the read pointer reaches the upper limit, it goes to zero directly in the next trigger event.while read pointer goes to zero, DMA request will be triggered and transfer data into DAC buffer. The user should probethe DAC output with a oscilloscope to see the Half-sine signal.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dac_continuous_pdb_edma.uvprojx"/>
        <environment name="iar" load="iar/dac_continuous_pdb_edma.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="edma_memory_to_memory" folder="driver_examples/edma/memory_to_memory" doc="readme.txt">
      <description>The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/edma_memory_to_memory.uvprojx"/>
        <environment name="iar" load="iar/edma_memory_to_memory.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="edma_scatter_gather" folder="driver_examples/edma/scatter_gather" doc="readme.txt">
      <description>The EDMA memory to memory example is a simple demonstration program that uses the SDK software.It excuates one shot transfer from source buffer to destination buffer using the SDK EDMA drivers.The purpose of this example is to show how to use the EDMA and to provide a simple example fordebugging and further development.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/edma_scatter_gather.uvprojx"/>
        <environment name="iar" load="iar/edma_scatter_gather.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexcan_loopback_transfer" folder="driver_examples/flexcan/loopback_transfer" doc="readme.txt">
      <description>The flexcan_loopback example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrough internal loopback interconnect and print out the Message payload to terminal.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexcan_loopback_transfer.uvprojx"/>
        <environment name="iar" load="iar/flexcan_loopback_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexcan_loopback_edma_transfer" folder="driver_examples/flexcan/loopback_edma_transfer" doc="readme.txt">
      <description>The flexcan_loopback_edma example shows how to use the EDMA version transactional driver to receiveCAN Message from Rx FIFO:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Tx Message Buffer and also setup Rx FIFO. After that, the example will send 4 CAN Messagesfrom Tx Message Buffer to Rx FIFO through internal loopback interconnect and read them out usingEDMA version FlexCAN transactional driver. The Sent and received message will be print out to terminalat last.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexcan_loopback_edma_transfer.uvprojx"/>
        <environment name="iar" load="iar/flexcan_loopback_edma_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexcan_interrupt_transfer" folder="driver_examples/flexcan/interrupt_transfer" doc="readme.txt">
      <description>The flexcan_interrupt example shows how to use FlexCAN driver in none-blocking interrupt way:In this example, 2 boards are connected through CAN bus. Endpoint A(board A) send a CAN Message toEndpoint B(board B) when user press space key in terminal. Endpoint B receive the message, printthe message content to terminal and echo back the message. Endpoint A will increase the receivedmessage and waiting for the next transmission of the user initiated.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexcan_interrupt_transfer.uvprojx"/>
        <environment name="iar" load="iar/flexcan_interrupt_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="flexcan_loopback" folder="driver_examples/flexcan/loopback" doc="readme.txt">
      <description>The flexcan_loopback_functional example shows how to use the loopback test mode to debug your CAN Bus design:To demonstrates this example, only one board is needed. The example will config one FlexCAN MessageBuffer to Rx Message Buffer and the other FlexCAN Message Buffer to Tx Message Buffer with same ID.After that, the example will send a CAN Message from the Tx Message Buffer to the Rx Message Bufferthrouth internal loopback interconnect and print out the Message payload to terminal.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/flexcan_loopback.uvprojx"/>
        <environment name="iar" load="iar/flexcan_loopback.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="pdb_delay_interrupt" folder="driver_examples/pdb/delay_interrupt" doc="readme.txt">
      <description>The pdb_delay_interrupt example show how to use the PDB as a general programmable interrupt timer.The PDB is triggered by software, and other external triggers are generated from PDB in this project,so that user can see just a general counter is working with interrupt.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/pdb_delay_interrupt.uvprojx"/>
        <environment name="iar" load="iar/pdb_delay_interrupt.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="pdb_dac_trigger" folder="driver_examples/pdb/dac_trigger" doc="readme.txt">
      <description>The pdb_dac_trigger example shows how to use the PDB to generate a DAC trigger.Based on the basic counter, to use the DAC trigger, just to enable the DAC trigger's "milestone" and set the user-defined value for it.The DAC's "milestone" is called as "interval". Multiple DAC trigger intervals can be included into one PDB counter's cycle.DAC trigger's counter would reset after the trigger is created and start counting again to the interval value.In this example, the DAC is configured with hardware buffer enabled in normal work mode. Once it gets the trigger from the PDB, the buffer read pointer increases.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/pdb_dac_trigger.uvprojx"/>
        <environment name="iar" load="iar/pdb_dac_trigger.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2c_interrupt_b2b_transfer_master" folder="driver_examples/i2c/interrupt_b2b_transfer/master" doc="readme.txt">
      <description>The i2c_interrupt_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer with interrupt:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2c_interrupt_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/i2c_interrupt_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2c_interrupt_b2b_transfer_slave" folder="driver_examples/i2c/interrupt_b2b_transfer/slave" doc="readme.txt">
      <description>The i2c_interrupt_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with interrupt:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2c_interrupt_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/i2c_interrupt_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2c_polling_b2b_transfer_master" folder="driver_examples/i2c/polling_b2b_transfer/master" doc="readme.txt">
      <description>The i2c_polling_b2b_transfer_master example shows how to use i2c driver as master to do board to board transfer using polling method:In this example, one i2c instance as master and another i2c instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2c_polling_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/i2c_polling_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="i2c_polling_b2b_transfer_slave" folder="driver_examples/i2c/polling_b2b_transfer/slave" doc="readme.txt">
      <description>The i2c_polling_b2b_transfer_slave example shows how to use i2c driver as slave to do board to board transfer with a polling master:In this example, one i2c instance as slave and another i2c instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/i2c_polling_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/i2c_polling_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="shell" folder="demo_apps/shell" doc="readme.txt">
      <description>The Shell Demo application demonstrates to control Leds by commands.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/shell.uvprojx"/>
        <environment name="iar" load="iar/shell.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="pflash" folder="driver_examples/flash/pflash" doc="readme.txt">
      <description>The pflash example shows how to use flash driver to operate program flash:</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/pflash.uvprojx"/>
        <environment name="iar" load="iar/pflash.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="enc_basic" folder="driver_examples/enc/basic" doc="readme.txt">
      <description>The enc_basic example shows how to quickly start using ENC driver.In this example, user needs to connect a real encoder to the board. Actually, only PHASE A and PHASE B are enough for the basic application. When running the project, user can turn the encoder so that ENC module can monitor the position change. Then, the internal counter would also count for the position. User can also type keys into terminal, and the current position values recorded by ENC would display. The ENC hardware is created with a special synchronize mechanism. There are actually 4 counters (the 32-bit position counter is combined with the two 16-bit counter registers) for position with responding hold registers. When any of the counter registers is read, the contents of each counter register is written to the corresponding hold register. Taking a snapshot of the counters' values provides a consistent view of a system position and a velocity to be attained.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/enc_basic.uvprojx"/>
        <environment name="iar" load="iar/enc_basic.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="enc_index_interrupt" folder="driver_examples/enc/index_interrupt" doc="readme.txt">
      <description>The enc_index_interrupt example shows how to use the interrupt of ENC module with ENC driver.In this example, user needs to connect a real encoder to the board. Actually, only PHASE A and PHASE B are enough for the basic application. However, the additional INDEX/HOME/TRIGGER could be used as the event detector. INDEX: This pulse can optionally reset the position counter and the pulse accumulator of the quadrature decoder module. It also causes a change of state on the revolution counter. The direction of this change, increment or decrement, is calculated from the PHASEA and PHASEB inputs.HOME: This input can be used to trigger the initialization of the position counters. Often this signal is connected to a sensor signalling the motor or machine, sending notification that it has reached a defined home position.TRIGGER: This input can be used to clear the position counters or to take a snapshot of the POS, REV, and POSD registers. Often this signal is connected to a periodic pulse generator or timer to indicate an elapsed time period.This example uses INDEX to response the external event. When running the project, user can turn the encoder so that ENC module can monitor the position change. Also, a variable counter would count the time of INDEX interrupt for rising edge on INDEX signal line.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/enc_index_interrupt.uvprojx"/>
        <environment name="iar" load="iar/enc_index_interrupt.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dac_cadc" folder="demo_apps/dac_cadc" doc="readme.txt">
      <description>The DAC / CADC demo application demonstrates the use of the DAC and CADC peripherals.This application demonstrates how to configure the DAC and set the output on the DAC.This demo also demonstrates how to configure the CADC and how to read CADC values.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dac_cadc.uvprojx"/>
        <environment name="iar" load="iar/dac_cadc.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="thermistor_lab_cadc" folder="demo_apps/thermistor_lab_cadc" doc="readme.txt">
      <description>The Thermistor Lab Demo application demonstrates how to use PDB to trigger ADC and measure on-board thermistor.This demo shows how to configure and use the ADC module to sample the differential voltage across onboard thermistors RT1-RT4.If the user touches any on-board thermistor with a finger, the lab application detects a change in the thermistor temperatureand starts flashing the corresponding LED pair.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/thermistor_lab_cadc.uvprojx"/>
        <environment name="iar" load="iar/thermistor_lab_cadc.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="xbar_aoi" folder="demo_apps/xbar_aoi" doc="readme.txt">
      <description>The XBAR AOI demo application demonstrates the usage of the XBAR, AOI peripheral to combine interruptfrom CMP and PIT. If the button is pressed(CMP interrupt) and the PIT periodic interrupt occurs a message is printed.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/xbar_aoi.uvprojx"/>
        <environment name="iar" load="iar/xbar_aoi.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cadc_lptmr_trigger" folder="demo_apps/cadc/lptmr_trigger" doc="readme.txt">
      <description>This is an CADC demo application which shows how to use hardware trigger sources to handlethe CADC hardware trigger function. The Low Power Timer (LPTMR) is a period timer source and the CADChardware trigger event. Because the LPTMR trigger event can be used to trigger one of the CADC ,this demo uses the LPTMR as a trigger source for a CADCx channel. The LPTMR triggers the CADC in afixed frequency and the demo gets the CADC conversion result in the CADC Conversion Complete (COCO) interrupt.This demo uses DAC fifo to generate sinewave on DACx_OUT.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cadc_lptmr_trigger.uvprojx"/>
        <environment name="iar" load="iar/cadc_lptmr_trigger.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cadc_pdb_trigger" folder="demo_apps/cadc/pdb_trigger" doc="readme.txt">
      <description>This is an CADC demo application which shows how to use hardware trigger sources to handlethe CADC hardware trigger function. The Programmable Delay Block (PDB) is a period timer source and the CADChardware trigger event. Because the PDB trigger event can be used to trigger one of the CADC ,this demo uses the PDB as a trigger source for a CADCx channel. The PDB triggers the CADC in afixed frequency and the demo gets the CADC conversion result in the CADC Conversion Complete (COCO) interrupt.This demo uses DAC fifo to generate sinewave on DACx_OUT.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cadc_pdb_trigger.uvprojx"/>
        <environment name="iar" load="iar/cadc_pdb_trigger.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cadc_pwm_trigger" folder="demo_apps/cadc/pwm_trigger" doc="readme.txt">
      <description>This is an CADC demo application which shows how to use hardware trigger sources to handlethe CADC hardware trigger function. The Pulse Width Modulator (PWM) is a period timer source and the CADChardware trigger event. Because the PWM trigger event can be used to trigger one of the CADC ,this demo uses the PWM as a trigger source for a CADCx channel. The PWM triggers the CADC in afixed frequency and the demo gets the CADC conversion result in the CADC Conversion Complete (COCO) interrupt.This demo uses DAC fifo to generate sinewave on DACx_OUT.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cadc_pwm_trigger.uvprojx"/>
        <environment name="iar" load="iar/cadc_pwm_trigger.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cadc_pit_trigger" folder="demo_apps/cadc/pit_trigger" doc="readme.txt">
      <description>This is an CADC demo application which shows how to use hardware trigger sources to handlethe CADC hardware trigger function. The Periodic Interrupt Timer (PIT) is a period timer source and the CADChardware trigger event. Because the PIT trigger event can be used to trigger one of the CADC ,this demo uses the PIT as a trigger source for a CADCx channel. The PIT triggers the CADC in afixed frequency and the demo gets the CADC conversion result in the CADC Conversion Complete (COCO) interrupt.This demo uses DAC fifo to generate sinewave on DACx_OUT.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cadc_pit_trigger.uvprojx"/>
        <environment name="iar" load="iar/cadc_pit_trigger.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="ftm_quad_decoder" folder="demo_apps/ftm_quad_decoder" doc="readme.txt">
      <description>This demo describes the usage of Quad Decoder feature in FTM module, which can be used to count the position of decoder.An external decoder is used to generate the PHA and PHB's signal. These two signals are feed to the FTM pins with Quad Decoder feature (FTMx_QD_PHA and FTMx_QD_PHB). Then, the counter value and direction would be displayed in terminal window predically.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/ftm_quad_decoder.uvprojx"/>
        <environment name="iar" load="iar/ftm_quad_decoder.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_dspi_edma_b2b_transfer_master" folder="cmsis_driver_examples/dspi/edma_b2b_transfer/master" doc="readme.txt">
      <description>The dspi_edma_b2b_transfer example shows how to use DSPI CMSIS driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_master.c' includes the DSPI master code.1. DSPI master send/received data to/from DSPI slave in edma . </description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_dspi_edma_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/cmsis_dspi_edma_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_dspi_edma_b2b_transfer_slave" folder="cmsis_driver_examples/dspi/edma_b2b_transfer/slave" doc="readme.txt">
      <description>The dspi_edma_b2b_transfer example shows how to use DSPI CMSIS driver in edma way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_edma_b2b_transfer_slave.c' includes the DSPI slave code.1. DSPI master send/received data to/from DSPI slave in edma . </description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_dspi_edma_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/cmsis_dspi_edma_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_dspi_int_b2b_transfer_master" folder="cmsis_driver_examples/dspi/int_b2b_transfer/master" doc="readme.txt">
      <description>The dspi_int_b2b_transfer example shows how to use DSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_int_b2b_transfer_master.c' includes the DSPI master code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . </description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_dspi_int_b2b_transfer_master.uvprojx"/>
        <environment name="iar" load="iar/cmsis_dspi_int_b2b_transfer_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_dspi_int_b2b_transfer_slave" folder="cmsis_driver_examples/dspi/int_b2b_transfer/slave" doc="readme.txt">
      <description>The dspi_int_b2b_transfer example shows how to use DSPI CMSIS driver in interrupt way:In this example , we need two boards, one board used as DSPI master and another board used as DSPI slave.The file 'dspi_int_b2b_transfer_slave.c' includes the DSPI slave code.This example uses the transactional API in DSPI driver.1. DSPI master send/received data to/from DSPI slave in interrupt . </description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_dspi_int_b2b_transfer_slave.uvprojx"/>
        <environment name="iar" load="iar/cmsis_dspi_int_b2b_transfer_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_uart_interrupt_transfer" folder="cmsis_driver_examples/uart/interrupt_transfer" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_interrupt_transfer example shows how to use uart cmsis driver in interrupt way:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_uart_interrupt_transfer.uvprojx"/>
        <environment name="iar" load="iar/cmsis_uart_interrupt_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="cmsis_uart_edma_transfer" folder="cmsis_driver_examples/uart/edma_transfer" doc="readme.txt">
      <description>CMSIS-Driver defines generic peripheral driver interfaces for middleware making it reusable across a wide range of supported microcontroller devices. The API connects microcontroller peripherals with middleware that implements for example communication stacks, file systems, or graphic user interfaces. More information and usage methord please refer to http://www.keil.com/pack/doc/cmsis/Driver/html/index.html.The cmsis_uart_edma_transfer example shows how to use uart cmsis  driver with EDMA:In this example, one uart instance connect to PC through uart, the board willsend back all characters that PC send to the board.Note: The example echo every 8 characters, so input 8 characters every time.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/cmsis_uart_edma_transfer.uvprojx"/>
        <environment name="iar" load="iar/cmsis_uart_edma_transfer.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dspi_half_duplex_polling_master" folder="driver_examples/dspi/half_duplex_transfer/polling/master" doc="readme.txt">
      <description>The dspi_half_duplex_polling_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends apiece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct. Besides, master will transfer in polling way. </description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dspi_half_duplex_polling_master.uvprojx"/>
        <environment name="iar" load="iar/dspi_half_duplex_polling_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dspi_half_duplex_polling_slave" folder="driver_examples/dspi/half_duplex_transfer/polling/slave" doc="readme.txt">
      <description>The dspi_half_duplex_polling_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses interrupt mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dspi_half_duplex_polling_slave.uvprojx"/>
        <environment name="iar" load="iar/dspi_half_duplex_polling_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dspi_half_duplex_int_master" folder="driver_examples/dspi/half_duplex_transfer/int/master" doc="readme.txt">
      <description>The dspi_half_duplex_int_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from slave is correct.Besides, master will transfer in interrupt way. </description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dspi_half_duplex_int_master.uvprojx"/>
        <environment name="iar" load="iar/dspi_half_duplex_int_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dspi_half_duplex_int_slave" folder="driver_examples/dspi/half_duplex_transfer/int/slave" doc="readme.txt">
      <description>The dspi_half_duplex_int_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses interrupt mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the begain address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dspi_half_duplex_int_slave.uvprojx"/>
        <environment name="iar" load="iar/dspi_half_duplex_int_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dspi_half_duplex_edma_master" folder="driver_examples/dspi/half_duplex_transfer/edma/master" doc="readme.txt">
      <description>The dspi_half_duplex_edma_transfer_master example shows how to use driver API to transfer in half-duplex way.  In this example, one spi instance as master and another spi instance on the other board as slave. Master sendsa piece of data to slave, and receive a piece of data from slave. This example checks if the data received fromslave is correct.Besides, master will transfer in EDMA way. </description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dspi_half_duplex_edma_master.uvprojx"/>
        <environment name="iar" load="iar/dspi_half_duplex_edma_master.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="dspi_half_duplex_edma_slave" folder="driver_examples/dspi/half_duplex_transfer/edma/slave" doc="readme.txt">
      <description>The dspi_half_duplex_edma_transfer_slave example shows how to receive and transmit data to master board.Notice: The SPI slave of this example uses edma mode. The data transfer size(not buffer size) is twice ofthe master's transfer size. The first half of the transmission will receive data, and the second half will senddata back to master, so the begain address of the receive buffer is &amp;rxDataPolling[64].In this example, one spi instance as slave and another spi instance on the other board as master. Master sends a piece of data to slave, and receive a piece of data from slave. This example checks if the data received from master is correct. And slave will print what it received.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/dspi_half_duplex_edma_slave.uvprojx"/>
        <environment name="iar" load="iar/dspi_half_duplex_edma_slave.ewp"/>
      </project>
      <attributes/>
    </example>
    <example name="led_blinky" folder="demo_apps/led_blinky" doc="readme.txt">
      <description>The LED Blinky demo application provides a sanity check for the new SDK build environments and board bring up. The LED Blinky demo uses the systick interrupt to realize the function of timing delay. The example takes turns to shine the LED. The purpose of this demo is to provide a simple project for debugging and further development.</description>
      <board name="TWR-KV46F150M" vendor="NXP" Dvendor="NXP:11"/>
      <project>
        <environment name="uv" load="mdk/led_blinky.uvprojx"/>
        <environment name="iar" load="iar/led_blinky.ewp"/>
      </project>
      <attributes/>
    </example>
  </examples>
  <components>
    <component Cclass="Board Support" Cgroup="SDK Project Template" Csub="project_template" Cvariant="twrkv46f150m" Cversion="1.0.0" condition="device.MKV46F16_AND_component.serial_manager_uart_AND_component.uart_adapter_AND_device.MKV46F16_startup_AND_driver.clock_AND_driver.common_AND_driver.gpio_AND_driver.port_AND_driver.smc_AND_driver.uart_AND_driver.xbara_AND_utility.debug_console">
      <description/>
      <files>
        <file category="header" attr="config" name="project_template/board.h"/>
        <file category="sourceC" attr="config" name="project_template/board.c"/>
        <file category="header" attr="config" name="project_template/clock_config.h"/>
        <file category="sourceC" attr="config" name="project_template/clock_config.c"/>
        <file category="header" attr="config" name="project_template/pin_mux.h"/>
        <file category="sourceC" attr="config" name="project_template/pin_mux.c"/>
        <file category="header" attr="config" name="project_template/peripherals.h"/>
        <file category="sourceC" attr="config" name="project_template/peripherals.c"/>
      </files>
    </component>
  </components>
</package>
